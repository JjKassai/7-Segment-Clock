
7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004780  08004780  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004780  08004780  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  080047f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080047f8  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c182  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f80  00000000  00000000  0002c21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ca3  00000000  00000000  0002f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce75  00000000  00000000  0004822b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9e5  00000000  00000000  000550a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfa85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b8  00000000  00000000  000dfad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800456c 	.word	0x0800456c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800456c 	.word	0x0800456c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <readHours>:
#include "DS3231.h"

uint8_t readHours(I2C_HandleTypeDef commChannel)
{
 8000234:	b084      	sub	sp, #16
 8000236:	b5b0      	push	{r4, r5, r7, lr}
 8000238:	b084      	sub	sp, #16
 800023a:	af02      	add	r7, sp, #8
 800023c:	2518      	movs	r5, #24
 800023e:	197c      	adds	r4, r7, r5
 8000240:	6020      	str	r0, [r4, #0]
 8000242:	6061      	str	r1, [r4, #4]
 8000244:	60a2      	str	r2, [r4, #8]
 8000246:	60e3      	str	r3, [r4, #12]
	uint8_t rawValue;
	uint8_t returnValue;

	address = address_DS3231;
 8000248:	23d0      	movs	r3, #208	; 0xd0
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <readHours+0x88>)
 800024e:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Hour;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <readHours+0x8c>)
 8000252:	2202      	movs	r2, #2
 8000254:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <readHours+0x88>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b299      	uxth	r1, r3
 800025c:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <readHours+0x8c>)
 800025e:	1978      	adds	r0, r7, r5
 8000260:	23fa      	movs	r3, #250	; 0xfa
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2301      	movs	r3, #1
 8000268:	f001 fe06 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &rawValue, 1, 500);
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <readHours+0x88>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b299      	uxth	r1, r3
 8000272:	1dba      	adds	r2, r7, #6
 8000274:	1978      	adds	r0, r7, r5
 8000276:	23fa      	movs	r3, #250	; 0xfa
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	f001 ff03 	bl	8002088 <HAL_I2C_Master_Receive>

	returnValue = (((rawValue & 0b00111111)>> 4) * 10) + (rawValue & 0b00001111);
 8000282:	1dbb      	adds	r3, r7, #6
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	111b      	asrs	r3, r3, #4
 8000288:	b2db      	uxtb	r3, r3
 800028a:	2203      	movs	r2, #3
 800028c:	4013      	ands	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	1c1a      	adds	r2, r3, #0
 8000292:	0092      	lsls	r2, r2, #2
 8000294:	18d3      	adds	r3, r2, r3
 8000296:	18db      	adds	r3, r3, r3
 8000298:	b2d9      	uxtb	r1, r3
 800029a:	1dbb      	adds	r3, r7, #6
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	220f      	movs	r2, #15
 80002a0:	4013      	ands	r3, r2
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	1dfb      	adds	r3, r7, #7
 80002a6:	188a      	adds	r2, r1, r2
 80002a8:	701a      	strb	r2, [r3, #0]

	return returnValue;
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	781b      	ldrb	r3, [r3, #0]
}
 80002ae:	0018      	movs	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b002      	add	sp, #8
 80002b4:	bcb0      	pop	{r4, r5, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	b004      	add	sp, #16
 80002ba:	4718      	bx	r3
 80002bc:	20000098 	.word	0x20000098
 80002c0:	200000b0 	.word	0x200000b0

080002c4 <readSeconds>:


uint8_t readSeconds(I2C_HandleTypeDef commChannel)
{
 80002c4:	b084      	sub	sp, #16
 80002c6:	b5b0      	push	{r4, r5, r7, lr}
 80002c8:	b084      	sub	sp, #16
 80002ca:	af02      	add	r7, sp, #8
 80002cc:	2518      	movs	r5, #24
 80002ce:	197c      	adds	r4, r7, r5
 80002d0:	6020      	str	r0, [r4, #0]
 80002d2:	6061      	str	r1, [r4, #4]
 80002d4:	60a2      	str	r2, [r4, #8]
 80002d6:	60e3      	str	r3, [r4, #12]
	uint8_t rawValue;
	uint8_t calculatedValue;

	address = address_DS3231;
 80002d8:	23d0      	movs	r3, #208	; 0xd0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <readSeconds+0x84>)
 80002de:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Seconds;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <readSeconds+0x88>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <readSeconds+0x84>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b299      	uxth	r1, r3
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <readSeconds+0x88>)
 80002ee:	1978      	adds	r0, r7, r5
 80002f0:	23fa      	movs	r3, #250	; 0xfa
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2301      	movs	r3, #1
 80002f8:	f001 fdbe 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &rawValue, 1, 500);
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <readSeconds+0x84>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b299      	uxth	r1, r3
 8000302:	1dba      	adds	r2, r7, #6
 8000304:	1978      	adds	r0, r7, r5
 8000306:	23fa      	movs	r3, #250	; 0xfa
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2301      	movs	r3, #1
 800030e:	f001 febb 	bl	8002088 <HAL_I2C_Master_Receive>

	calculatedValue = ((rawValue >> 4) * 10) + (rawValue & 0b00001111);
 8000312:	1dbb      	adds	r3, r7, #6
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	091b      	lsrs	r3, r3, #4
 8000318:	b2db      	uxtb	r3, r3
 800031a:	1c1a      	adds	r2, r3, #0
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	18d3      	adds	r3, r2, r3
 8000320:	18db      	adds	r3, r3, r3
 8000322:	b2d9      	uxtb	r1, r3
 8000324:	1dbb      	adds	r3, r7, #6
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	220f      	movs	r2, #15
 800032a:	4013      	ands	r3, r2
 800032c:	b2da      	uxtb	r2, r3
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	188a      	adds	r2, r1, r2
 8000332:	701a      	strb	r2, [r3, #0]

	return calculatedValue;
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	781b      	ldrb	r3, [r3, #0]
}
 8000338:	0018      	movs	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bcb0      	pop	{r4, r5, r7}
 8000340:	bc08      	pop	{r3}
 8000342:	b004      	add	sp, #16
 8000344:	4718      	bx	r3
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	20000098 	.word	0x20000098
 800034c:	200000b0 	.word	0x200000b0

08000350 <readMinutes>:


uint8_t readMinutes(I2C_HandleTypeDef commChannel)
{
 8000350:	b084      	sub	sp, #16
 8000352:	b5b0      	push	{r4, r5, r7, lr}
 8000354:	b084      	sub	sp, #16
 8000356:	af02      	add	r7, sp, #8
 8000358:	2518      	movs	r5, #24
 800035a:	197c      	adds	r4, r7, r5
 800035c:	6020      	str	r0, [r4, #0]
 800035e:	6061      	str	r1, [r4, #4]
 8000360:	60a2      	str	r2, [r4, #8]
 8000362:	60e3      	str	r3, [r4, #12]
	uint8_t rawValue;
	uint8_t calculatedReturn;

	address = address_DS3231;
 8000364:	23d0      	movs	r3, #208	; 0xd0
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <readMinutes+0x84>)
 800036a:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Minutes;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <readMinutes+0x88>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <readMinutes+0x84>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b299      	uxth	r1, r3
 8000378:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <readMinutes+0x88>)
 800037a:	1978      	adds	r0, r7, r5
 800037c:	23fa      	movs	r3, #250	; 0xfa
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2301      	movs	r3, #1
 8000384:	f001 fd78 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &rawValue, 1, 500);
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <readMinutes+0x84>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	b299      	uxth	r1, r3
 800038e:	1dba      	adds	r2, r7, #6
 8000390:	1978      	adds	r0, r7, r5
 8000392:	23fa      	movs	r3, #250	; 0xfa
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2301      	movs	r3, #1
 800039a:	f001 fe75 	bl	8002088 <HAL_I2C_Master_Receive>

	calculatedReturn = ((rawValue >> 4) * 10) + (rawValue & 0b00001111);
 800039e:	1dbb      	adds	r3, r7, #6
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	091b      	lsrs	r3, r3, #4
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	1c1a      	adds	r2, r3, #0
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	18d3      	adds	r3, r2, r3
 80003ac:	18db      	adds	r3, r3, r3
 80003ae:	b2d9      	uxtb	r1, r3
 80003b0:	1dbb      	adds	r3, r7, #6
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	220f      	movs	r2, #15
 80003b6:	4013      	ands	r3, r2
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	188a      	adds	r2, r1, r2
 80003be:	701a      	strb	r2, [r3, #0]

	return calculatedReturn;
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
}
 80003c4:	0018      	movs	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b002      	add	sp, #8
 80003ca:	bcb0      	pop	{r4, r5, r7}
 80003cc:	bc08      	pop	{r3}
 80003ce:	b004      	add	sp, #16
 80003d0:	4718      	bx	r3
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	20000098 	.word	0x20000098
 80003d8:	200000b0 	.word	0x200000b0

080003dc <readMonth>:

uint8_t readMonth(I2C_HandleTypeDef commChannel)
{
 80003dc:	b084      	sub	sp, #16
 80003de:	b5b0      	push	{r4, r5, r7, lr}
 80003e0:	b084      	sub	sp, #16
 80003e2:	af02      	add	r7, sp, #8
 80003e4:	2518      	movs	r5, #24
 80003e6:	197c      	adds	r4, r7, r5
 80003e8:	6020      	str	r0, [r4, #0]
 80003ea:	6061      	str	r1, [r4, #4]
 80003ec:	60a2      	str	r2, [r4, #8]
 80003ee:	60e3      	str	r3, [r4, #12]
	uint8_t rawValue;
	uint8_t calculatedReturn;

	address = address_DS3231;
 80003f0:	23d0      	movs	r3, #208	; 0xd0
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <readMonth+0x88>)
 80003f6:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Month;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <readMonth+0x8c>)
 80003fa:	2205      	movs	r2, #5
 80003fc:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <readMonth+0x88>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	b299      	uxth	r1, r3
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <readMonth+0x8c>)
 8000406:	1978      	adds	r0, r7, r5
 8000408:	23fa      	movs	r3, #250	; 0xfa
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2301      	movs	r3, #1
 8000410:	f001 fd32 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &rawValue, 1, 500);
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <readMonth+0x88>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b299      	uxth	r1, r3
 800041a:	1dba      	adds	r2, r7, #6
 800041c:	1978      	adds	r0, r7, r5
 800041e:	23fa      	movs	r3, #250	; 0xfa
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2301      	movs	r3, #1
 8000426:	f001 fe2f 	bl	8002088 <HAL_I2C_Master_Receive>

	calculatedReturn = ((rawValue & 0b00010000) >> 4) * 10 + (rawValue & 0b00001111);
 800042a:	1dbb      	adds	r3, r7, #6
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	111b      	asrs	r3, r3, #4
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2201      	movs	r2, #1
 8000434:	4013      	ands	r3, r2
 8000436:	b2db      	uxtb	r3, r3
 8000438:	1c1a      	adds	r2, r3, #0
 800043a:	0092      	lsls	r2, r2, #2
 800043c:	18d3      	adds	r3, r2, r3
 800043e:	18db      	adds	r3, r3, r3
 8000440:	b2d9      	uxtb	r1, r3
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	220f      	movs	r2, #15
 8000448:	4013      	ands	r3, r2
 800044a:	b2da      	uxtb	r2, r3
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	188a      	adds	r2, r1, r2
 8000450:	701a      	strb	r2, [r3, #0]

	return calculatedReturn;
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
}
 8000456:	0018      	movs	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bcb0      	pop	{r4, r5, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	b004      	add	sp, #16
 8000462:	4718      	bx	r3
 8000464:	20000098 	.word	0x20000098
 8000468:	200000b0 	.word	0x200000b0

0800046c <readDay>:

uint8_t readDay(I2C_HandleTypeDef commChannel)
{
 800046c:	b084      	sub	sp, #16
 800046e:	b5b0      	push	{r4, r5, r7, lr}
 8000470:	b084      	sub	sp, #16
 8000472:	af02      	add	r7, sp, #8
 8000474:	2518      	movs	r5, #24
 8000476:	197c      	adds	r4, r7, r5
 8000478:	6020      	str	r0, [r4, #0]
 800047a:	6061      	str	r1, [r4, #4]
 800047c:	60a2      	str	r2, [r4, #8]
 800047e:	60e3      	str	r3, [r4, #12]
	uint8_t returnValue;
	uint8_t calculatedValue;

	address = address_DS3231;
 8000480:	23d0      	movs	r3, #208	; 0xd0
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <readDay+0x84>)
 8000486:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Date;
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <readDay+0x88>)
 800048a:	2204      	movs	r2, #4
 800048c:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <readDay+0x84>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b299      	uxth	r1, r3
 8000494:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <readDay+0x88>)
 8000496:	1978      	adds	r0, r7, r5
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	f001 fcea 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &returnValue, 1, 500);
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <readDay+0x84>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b299      	uxth	r1, r3
 80004aa:	1dba      	adds	r2, r7, #6
 80004ac:	1978      	adds	r0, r7, r5
 80004ae:	23fa      	movs	r3, #250	; 0xfa
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2301      	movs	r3, #1
 80004b6:	f001 fde7 	bl	8002088 <HAL_I2C_Master_Receive>

	calculatedValue = ((returnValue & 0b11110000) >> 4) * 10 + (returnValue & 0b00001111);
 80004ba:	1dbb      	adds	r3, r7, #6
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	091b      	lsrs	r3, r3, #4
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	1c1a      	adds	r2, r3, #0
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	18db      	adds	r3, r3, r3
 80004ca:	b2d9      	uxtb	r1, r3
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	220f      	movs	r2, #15
 80004d2:	4013      	ands	r3, r2
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	188a      	adds	r2, r1, r2
 80004da:	701a      	strb	r2, [r3, #0]

	return calculatedValue;
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bcb0      	pop	{r4, r5, r7}
 80004e8:	bc08      	pop	{r3}
 80004ea:	b004      	add	sp, #16
 80004ec:	4718      	bx	r3
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20000098 	.word	0x20000098
 80004f4:	200000b0 	.word	0x200000b0

080004f8 <readYear>:

uint8_t readYear(I2C_HandleTypeDef commChannel)
{
 80004f8:	b084      	sub	sp, #16
 80004fa:	b5b0      	push	{r4, r5, r7, lr}
 80004fc:	b084      	sub	sp, #16
 80004fe:	af02      	add	r7, sp, #8
 8000500:	2518      	movs	r5, #24
 8000502:	197c      	adds	r4, r7, r5
 8000504:	6020      	str	r0, [r4, #0]
 8000506:	6061      	str	r1, [r4, #4]
 8000508:	60a2      	str	r2, [r4, #8]
 800050a:	60e3      	str	r3, [r4, #12]
	uint8_t returnValue;
	uint8_t calculatedValue;

	address = address_DS3231;
 800050c:	23d0      	movs	r3, #208	; 0xd0
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <readYear+0x84>)
 8000512:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Year;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <readYear+0x88>)
 8000516:	2206      	movs	r2, #6
 8000518:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 1, 500);
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <readYear+0x84>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b299      	uxth	r1, r3
 8000520:	4a17      	ldr	r2, [pc, #92]	; (8000580 <readYear+0x88>)
 8000522:	1978      	adds	r0, r7, r5
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	f001 fca4 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&commChannel, address, &returnValue, 1, 500);
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <readYear+0x84>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b299      	uxth	r1, r3
 8000536:	1dba      	adds	r2, r7, #6
 8000538:	1978      	adds	r0, r7, r5
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2301      	movs	r3, #1
 8000542:	f001 fda1 	bl	8002088 <HAL_I2C_Master_Receive>

	calculatedValue = (returnValue >> 4) * 10 + (returnValue & 0b00001111);
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	091b      	lsrs	r3, r3, #4
 800054c:	b2db      	uxtb	r3, r3
 800054e:	1c1a      	adds	r2, r3, #0
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	18db      	adds	r3, r3, r3
 8000556:	b2d9      	uxtb	r1, r3
 8000558:	1dbb      	adds	r3, r7, #6
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	220f      	movs	r2, #15
 800055e:	4013      	ands	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	188a      	adds	r2, r1, r2
 8000566:	701a      	strb	r2, [r3, #0]

	return calculatedValue;
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bcb0      	pop	{r4, r5, r7}
 8000574:	bc08      	pop	{r3}
 8000576:	b004      	add	sp, #16
 8000578:	4718      	bx	r3
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	20000098 	.word	0x20000098
 8000580:	200000b0 	.word	0x200000b0

08000584 <writeYear>:

void writeYear(I2C_HandleTypeDef commChannel, uint8_t yearValueTens, uint8_t yearValueOnes)
{
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	af02      	add	r7, sp, #8
 800058c:	2518      	movs	r5, #24
 800058e:	197c      	adds	r4, r7, r5
 8000590:	6020      	str	r0, [r4, #0]
 8000592:	6061      	str	r1, [r4, #4]
 8000594:	60a2      	str	r2, [r4, #8]
 8000596:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue =  yearValueTens << 4;
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	224c      	movs	r2, #76	; 0x4c
 800059c:	2118      	movs	r1, #24
 800059e:	468c      	mov	ip, r1
 80005a0:	44bc      	add	ip, r7
 80005a2:	4462      	add	r2, ip
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	701a      	strb	r2, [r3, #0]
	setValue = setValue + yearValueOnes;
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	1df9      	adds	r1, r7, #7
 80005ae:	2250      	movs	r2, #80	; 0x50
 80005b0:	2018      	movs	r0, #24
 80005b2:	4684      	mov	ip, r0
 80005b4:	44bc      	add	ip, r7
 80005b6:	4462      	add	r2, ip
 80005b8:	7809      	ldrb	r1, [r1, #0]
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	188a      	adds	r2, r1, r2
 80005be:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 80005c0:	23d0      	movs	r3, #208	; 0xd0
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <writeYear+0x78>)
 80005c6:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Year;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <writeYear+0x7c>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <writeYear+0x7c>)
 80005d0:	1dfa      	adds	r2, r7, #7
 80005d2:	7812      	ldrb	r2, [r2, #0]
 80005d4:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 2, 500);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <writeYear+0x78>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b299      	uxth	r1, r3
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <writeYear+0x7c>)
 80005de:	1978      	adds	r0, r7, r5
 80005e0:	23fa      	movs	r3, #250	; 0xfa
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2302      	movs	r3, #2
 80005e8:	f001 fc46 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b002      	add	sp, #8
 80005f2:	bcb0      	pop	{r4, r5, r7}
 80005f4:	bc08      	pop	{r3}
 80005f6:	b004      	add	sp, #16
 80005f8:	4718      	bx	r3
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000098 	.word	0x20000098
 8000600:	200000b0 	.word	0x200000b0

08000604 <writeMonth>:

void writeMonth(I2C_HandleTypeDef commChannel, uint8_t monthValueTens, uint8_t monthValueOnes)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b5b0      	push	{r4, r5, r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af02      	add	r7, sp, #8
 800060c:	2518      	movs	r5, #24
 800060e:	197c      	adds	r4, r7, r5
 8000610:	6020      	str	r0, [r4, #0]
 8000612:	6061      	str	r1, [r4, #4]
 8000614:	60a2      	str	r2, [r4, #8]
 8000616:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue =  monthValueTens << 4;
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	224c      	movs	r2, #76	; 0x4c
 800061c:	2118      	movs	r1, #24
 800061e:	468c      	mov	ip, r1
 8000620:	44bc      	add	ip, r7
 8000622:	4462      	add	r2, ip
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	701a      	strb	r2, [r3, #0]
	setValue = setValue + monthValueOnes;
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	1df9      	adds	r1, r7, #7
 800062e:	2250      	movs	r2, #80	; 0x50
 8000630:	2018      	movs	r0, #24
 8000632:	4684      	mov	ip, r0
 8000634:	44bc      	add	ip, r7
 8000636:	4462      	add	r2, ip
 8000638:	7809      	ldrb	r1, [r1, #0]
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	188a      	adds	r2, r1, r2
 800063e:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 8000640:	23d0      	movs	r3, #208	; 0xd0
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <writeMonth+0x78>)
 8000646:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Month;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <writeMonth+0x7c>)
 800064a:	2205      	movs	r2, #5
 800064c:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <writeMonth+0x7c>)
 8000650:	1dfa      	adds	r2, r7, #7
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 2, 500);
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <writeMonth+0x78>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b299      	uxth	r1, r3
 800065c:	4a08      	ldr	r2, [pc, #32]	; (8000680 <writeMonth+0x7c>)
 800065e:	1978      	adds	r0, r7, r5
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2302      	movs	r3, #2
 8000668:	f001 fc06 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bcb0      	pop	{r4, r5, r7}
 8000674:	bc08      	pop	{r3}
 8000676:	b004      	add	sp, #16
 8000678:	4718      	bx	r3
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000098 	.word	0x20000098
 8000680:	200000b0 	.word	0x200000b0

08000684 <writeDay>:

void writeDay(I2C_HandleTypeDef commChannel, uint8_t dayValueTens, uint8_t dayValueOnes)
{
 8000684:	b084      	sub	sp, #16
 8000686:	b5b0      	push	{r4, r5, r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af02      	add	r7, sp, #8
 800068c:	2518      	movs	r5, #24
 800068e:	197c      	adds	r4, r7, r5
 8000690:	6020      	str	r0, [r4, #0]
 8000692:	6061      	str	r1, [r4, #4]
 8000694:	60a2      	str	r2, [r4, #8]
 8000696:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue =  dayValueTens << 4;
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	2118      	movs	r1, #24
 800069e:	468c      	mov	ip, r1
 80006a0:	44bc      	add	ip, r7
 80006a2:	4462      	add	r2, ip
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	701a      	strb	r2, [r3, #0]
	setValue = setValue + dayValueOnes;
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	1df9      	adds	r1, r7, #7
 80006ae:	2250      	movs	r2, #80	; 0x50
 80006b0:	2018      	movs	r0, #24
 80006b2:	4684      	mov	ip, r0
 80006b4:	44bc      	add	ip, r7
 80006b6:	4462      	add	r2, ip
 80006b8:	7809      	ldrb	r1, [r1, #0]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	188a      	adds	r2, r1, r2
 80006be:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 80006c0:	23d0      	movs	r3, #208	; 0xd0
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <writeDay+0x78>)
 80006c6:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Date;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <writeDay+0x7c>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <writeDay+0x7c>)
 80006d0:	1dfa      	adds	r2, r7, #7
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 2, 500);
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <writeDay+0x78>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b299      	uxth	r1, r3
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <writeDay+0x7c>)
 80006de:	1978      	adds	r0, r7, r5
 80006e0:	23fa      	movs	r3, #250	; 0xfa
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2302      	movs	r3, #2
 80006e8:	f001 fbc6 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bcb0      	pop	{r4, r5, r7}
 80006f4:	bc08      	pop	{r3}
 80006f6:	b004      	add	sp, #16
 80006f8:	4718      	bx	r3
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000098 	.word	0x20000098
 8000700:	200000b0 	.word	0x200000b0

08000704 <writeHours>:

void writeHours(I2C_HandleTypeDef commChannel, uint8_t hoursValueTens, uint8_t hoursValueOnes)
{
 8000704:	b084      	sub	sp, #16
 8000706:	b5b0      	push	{r4, r5, r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af02      	add	r7, sp, #8
 800070c:	2518      	movs	r5, #24
 800070e:	197c      	adds	r4, r7, r5
 8000710:	6020      	str	r0, [r4, #0]
 8000712:	6061      	str	r1, [r4, #4]
 8000714:	60a2      	str	r2, [r4, #8]
 8000716:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue = hoursValueTens << 4;
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	2118      	movs	r1, #24
 800071e:	468c      	mov	ip, r1
 8000720:	44bc      	add	ip, r7
 8000722:	4462      	add	r2, ip
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	701a      	strb	r2, [r3, #0]
	setValue = setValue + hoursValueOnes;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	1df9      	adds	r1, r7, #7
 800072e:	2250      	movs	r2, #80	; 0x50
 8000730:	2018      	movs	r0, #24
 8000732:	4684      	mov	ip, r0
 8000734:	44bc      	add	ip, r7
 8000736:	4462      	add	r2, ip
 8000738:	7809      	ldrb	r1, [r1, #0]
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	188a      	adds	r2, r1, r2
 800073e:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 8000740:	23d0      	movs	r3, #208	; 0xd0
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <writeHours+0x74>)
 8000746:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Hour;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <writeHours+0x78>)
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <writeHours+0x78>)
 8000750:	1dfa      	adds	r2, r7, #7
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address_DS3231, i2cBuffer, 2, 500);
 8000756:	23d0      	movs	r3, #208	; 0xd0
 8000758:	b299      	uxth	r1, r3
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <writeHours+0x78>)
 800075c:	1978      	adds	r0, r7, r5
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2302      	movs	r3, #2
 8000766:	f001 fb87 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bcb0      	pop	{r4, r5, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	b004      	add	sp, #16
 8000776:	4718      	bx	r3
 8000778:	20000098 	.word	0x20000098
 800077c:	200000b0 	.word	0x200000b0

08000780 <writeMinutes>:

void writeMinutes(I2C_HandleTypeDef commChannel, uint8_t minutesValueTens, uint8_t minutesValueOnes)
{
 8000780:	b084      	sub	sp, #16
 8000782:	b5b0      	push	{r4, r5, r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af02      	add	r7, sp, #8
 8000788:	2518      	movs	r5, #24
 800078a:	197c      	adds	r4, r7, r5
 800078c:	6020      	str	r0, [r4, #0]
 800078e:	6061      	str	r1, [r4, #4]
 8000790:	60a2      	str	r2, [r4, #8]
 8000792:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue = minutesValueTens << 4;
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	224c      	movs	r2, #76	; 0x4c
 8000798:	2118      	movs	r1, #24
 800079a:	468c      	mov	ip, r1
 800079c:	44bc      	add	ip, r7
 800079e:	4462      	add	r2, ip
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	701a      	strb	r2, [r3, #0]
	setValue = setValue + minutesValueOnes;
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2250      	movs	r2, #80	; 0x50
 80007ac:	2018      	movs	r0, #24
 80007ae:	4684      	mov	ip, r0
 80007b0:	44bc      	add	ip, r7
 80007b2:	4462      	add	r2, ip
 80007b4:	7809      	ldrb	r1, [r1, #0]
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	188a      	adds	r2, r1, r2
 80007ba:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 80007bc:	23d0      	movs	r3, #208	; 0xd0
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <writeMinutes+0x74>)
 80007c2:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Minutes;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <writeMinutes+0x78>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <writeMinutes+0x78>)
 80007cc:	1dfa      	adds	r2, r7, #7
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address_DS3231, i2cBuffer, 2, 500);
 80007d2:	23d0      	movs	r3, #208	; 0xd0
 80007d4:	b299      	uxth	r1, r3
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <writeMinutes+0x78>)
 80007d8:	1978      	adds	r0, r7, r5
 80007da:	23fa      	movs	r3, #250	; 0xfa
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	f001 fb49 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bcb0      	pop	{r4, r5, r7}
 80007ee:	bc08      	pop	{r3}
 80007f0:	b004      	add	sp, #16
 80007f2:	4718      	bx	r3
 80007f4:	20000098 	.word	0x20000098
 80007f8:	200000b0 	.word	0x200000b0

080007fc <writeSeconds>:

void writeSeconds(I2C_HandleTypeDef commChannel, uint8_t secondsValueTens, uint8_t secondsValueOnes)
{
 80007fc:	b084      	sub	sp, #16
 80007fe:	b5b0      	push	{r4, r5, r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af02      	add	r7, sp, #8
 8000804:	2518      	movs	r5, #24
 8000806:	197c      	adds	r4, r7, r5
 8000808:	6020      	str	r0, [r4, #0]
 800080a:	6061      	str	r1, [r4, #4]
 800080c:	60a2      	str	r2, [r4, #8]
 800080e:	60e3      	str	r3, [r4, #12]
	uint8_t setValue;

	setValue =  secondsValueTens << 4;
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	224c      	movs	r2, #76	; 0x4c
 8000814:	2118      	movs	r1, #24
 8000816:	468c      	mov	ip, r1
 8000818:	44bc      	add	ip, r7
 800081a:	4462      	add	r2, ip
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	701a      	strb	r2, [r3, #0]
	setValue = setValue + secondsValueOnes;
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	1df9      	adds	r1, r7, #7
 8000826:	2250      	movs	r2, #80	; 0x50
 8000828:	2018      	movs	r0, #24
 800082a:	4684      	mov	ip, r0
 800082c:	44bc      	add	ip, r7
 800082e:	4462      	add	r2, ip
 8000830:	7809      	ldrb	r1, [r1, #0]
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	188a      	adds	r2, r1, r2
 8000836:	701a      	strb	r2, [r3, #0]

	address = address_DS3231;
 8000838:	23d0      	movs	r3, #208	; 0xd0
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <writeSeconds+0x78>)
 800083e:	701a      	strb	r2, [r3, #0]
	i2cBuffer[0] = address_Seconds;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <writeSeconds+0x7c>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	i2cBuffer[1] = setValue;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <writeSeconds+0x7c>)
 8000848:	1dfa      	adds	r2, r7, #7
 800084a:	7812      	ldrb	r2, [r2, #0]
 800084c:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&commChannel, address, i2cBuffer, 2, 500);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <writeSeconds+0x78>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b299      	uxth	r1, r3
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <writeSeconds+0x7c>)
 8000856:	1978      	adds	r0, r7, r5
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2302      	movs	r3, #2
 8000860:	f001 fb0a 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bcb0      	pop	{r4, r5, r7}
 800086c:	bc08      	pop	{r3}
 800086e:	b004      	add	sp, #16
 8000870:	4718      	bx	r3
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000098 	.word	0x20000098
 8000878:	200000b0 	.word	0x200000b0

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	b0af      	sub	sp, #188	; 0xbc
 8000880:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 ffa1 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 fb81 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fc47 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088e:	f000 fc15 	bl	80010bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000892:	f000 fbd3 	bl	800103c <MX_I2C1_Init>
  uint8_t year;

  while (1)
  {
	  // Read the current time
	  hours = readHours(hi2c1);
 8000896:	263e      	movs	r6, #62	; 0x3e
 8000898:	19bd      	adds	r5, r7, r6
 800089a:	4cd7      	ldr	r4, [pc, #860]	; (8000bf8 <main+0x37c>)
 800089c:	466b      	mov	r3, sp
 800089e:	0018      	movs	r0, r3
 80008a0:	0023      	movs	r3, r4
 80008a2:	3310      	adds	r3, #16
 80008a4:	223c      	movs	r2, #60	; 0x3c
 80008a6:	0019      	movs	r1, r3
 80008a8:	f003 fa32 	bl	8003d10 <memcpy>
 80008ac:	6820      	ldr	r0, [r4, #0]
 80008ae:	6861      	ldr	r1, [r4, #4]
 80008b0:	68a2      	ldr	r2, [r4, #8]
 80008b2:	68e3      	ldr	r3, [r4, #12]
 80008b4:	f7ff fcbe 	bl	8000234 <readHours>
 80008b8:	0003      	movs	r3, r0
 80008ba:	702b      	strb	r3, [r5, #0]
	  minutes = readMinutes(hi2c1);
 80008bc:	233d      	movs	r3, #61	; 0x3d
 80008be:	18fd      	adds	r5, r7, r3
 80008c0:	4ccd      	ldr	r4, [pc, #820]	; (8000bf8 <main+0x37c>)
 80008c2:	466b      	mov	r3, sp
 80008c4:	0018      	movs	r0, r3
 80008c6:	0023      	movs	r3, r4
 80008c8:	3310      	adds	r3, #16
 80008ca:	223c      	movs	r2, #60	; 0x3c
 80008cc:	0019      	movs	r1, r3
 80008ce:	f003 fa1f 	bl	8003d10 <memcpy>
 80008d2:	6820      	ldr	r0, [r4, #0]
 80008d4:	6861      	ldr	r1, [r4, #4]
 80008d6:	68a2      	ldr	r2, [r4, #8]
 80008d8:	68e3      	ldr	r3, [r4, #12]
 80008da:	f7ff fd39 	bl	8000350 <readMinutes>
 80008de:	0003      	movs	r3, r0
 80008e0:	702b      	strb	r3, [r5, #0]
	  seconds = readSeconds(hi2c1);
 80008e2:	233c      	movs	r3, #60	; 0x3c
 80008e4:	18fd      	adds	r5, r7, r3
 80008e6:	4cc4      	ldr	r4, [pc, #784]	; (8000bf8 <main+0x37c>)
 80008e8:	466b      	mov	r3, sp
 80008ea:	0018      	movs	r0, r3
 80008ec:	0023      	movs	r3, r4
 80008ee:	3310      	adds	r3, #16
 80008f0:	223c      	movs	r2, #60	; 0x3c
 80008f2:	0019      	movs	r1, r3
 80008f4:	f003 fa0c 	bl	8003d10 <memcpy>
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	6861      	ldr	r1, [r4, #4]
 80008fc:	68a2      	ldr	r2, [r4, #8]
 80008fe:	68e3      	ldr	r3, [r4, #12]
 8000900:	f7ff fce0 	bl	80002c4 <readSeconds>
 8000904:	0003      	movs	r3, r0
 8000906:	702b      	strb	r3, [r5, #0]
	  month = readMonth(hi2c1);
 8000908:	233b      	movs	r3, #59	; 0x3b
 800090a:	18fd      	adds	r5, r7, r3
 800090c:	4cba      	ldr	r4, [pc, #744]	; (8000bf8 <main+0x37c>)
 800090e:	466b      	mov	r3, sp
 8000910:	0018      	movs	r0, r3
 8000912:	0023      	movs	r3, r4
 8000914:	3310      	adds	r3, #16
 8000916:	223c      	movs	r2, #60	; 0x3c
 8000918:	0019      	movs	r1, r3
 800091a:	f003 f9f9 	bl	8003d10 <memcpy>
 800091e:	6820      	ldr	r0, [r4, #0]
 8000920:	6861      	ldr	r1, [r4, #4]
 8000922:	68a2      	ldr	r2, [r4, #8]
 8000924:	68e3      	ldr	r3, [r4, #12]
 8000926:	f7ff fd59 	bl	80003dc <readMonth>
 800092a:	0003      	movs	r3, r0
 800092c:	702b      	strb	r3, [r5, #0]
	  day = readDay(hi2c1);
 800092e:	233a      	movs	r3, #58	; 0x3a
 8000930:	18fd      	adds	r5, r7, r3
 8000932:	4cb1      	ldr	r4, [pc, #708]	; (8000bf8 <main+0x37c>)
 8000934:	466b      	mov	r3, sp
 8000936:	0018      	movs	r0, r3
 8000938:	0023      	movs	r3, r4
 800093a:	3310      	adds	r3, #16
 800093c:	223c      	movs	r2, #60	; 0x3c
 800093e:	0019      	movs	r1, r3
 8000940:	f003 f9e6 	bl	8003d10 <memcpy>
 8000944:	6820      	ldr	r0, [r4, #0]
 8000946:	6861      	ldr	r1, [r4, #4]
 8000948:	68a2      	ldr	r2, [r4, #8]
 800094a:	68e3      	ldr	r3, [r4, #12]
 800094c:	f7ff fd8e 	bl	800046c <readDay>
 8000950:	0003      	movs	r3, r0
 8000952:	702b      	strb	r3, [r5, #0]
	  year = readYear(hi2c1);
 8000954:	2339      	movs	r3, #57	; 0x39
 8000956:	18fd      	adds	r5, r7, r3
 8000958:	4ca7      	ldr	r4, [pc, #668]	; (8000bf8 <main+0x37c>)
 800095a:	466b      	mov	r3, sp
 800095c:	0018      	movs	r0, r3
 800095e:	0023      	movs	r3, r4
 8000960:	3310      	adds	r3, #16
 8000962:	223c      	movs	r2, #60	; 0x3c
 8000964:	0019      	movs	r1, r3
 8000966:	f003 f9d3 	bl	8003d10 <memcpy>
 800096a:	6820      	ldr	r0, [r4, #0]
 800096c:	6861      	ldr	r1, [r4, #4]
 800096e:	68a2      	ldr	r2, [r4, #8]
 8000970:	68e3      	ldr	r3, [r4, #12]
 8000972:	f7ff fdc1 	bl	80004f8 <readYear>
 8000976:	0003      	movs	r3, r0
 8000978:	702b      	strb	r3, [r5, #0]

	  // Display the time
	  displayOff();
 800097a:	f000 fc7d 	bl	8001278 <displayOff>
	  if(hours > 9)
 800097e:	19bb      	adds	r3, r7, r6
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b09      	cmp	r3, #9
 8000984:	d92a      	bls.n	80009dc <main+0x160>
	  {
		  uint8_t temp;

		  digitOne();
 8000986:	f000 fd7d 	bl	8001484 <digitOne>
		  if(hours > 19)
 800098a:	19bb      	adds	r3, r7, r6
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b13      	cmp	r3, #19
 8000990:	d908      	bls.n	80009a4 <main+0x128>
		  {
			  displayTwo();
 8000992:	f000 fca7 	bl	80012e4 <displayTwo>
			  temp = hours - 20;
 8000996:	233f      	movs	r3, #63	; 0x3f
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	19ba      	adds	r2, r7, r6
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	3a14      	subs	r2, #20
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e008      	b.n	80009b6 <main+0x13a>
		  }
		  else
		  {
			  displayOne();
 80009a4:	f000 fc8a 	bl	80012bc <displayOne>
			  temp = hours - 10;
 80009a8:	233f      	movs	r3, #63	; 0x3f
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	223e      	movs	r2, #62	; 0x3e
 80009ae:	18ba      	adds	r2, r7, r2
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	3a0a      	subs	r2, #10
 80009b4:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_Delay(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 ff6a 	bl	8001890 <HAL_Delay>
		  displayOff();
 80009bc:	f000 fc5c 	bl	8001278 <displayOff>
		  digitTwo();
 80009c0:	f000 fd73 	bl	80014aa <digitTwo>
		  displayValue(temp);
 80009c4:	233f      	movs	r3, #63	; 0x3f
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fd24 	bl	8001418 <displayValue>
		  HAL_Delay(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 ff5d 	bl	8001890 <HAL_Delay>
		  displayOff();
 80009d6:	f000 fc4f 	bl	8001278 <displayOff>
 80009da:	e00c      	b.n	80009f6 <main+0x17a>
	  }
	  else
	  {
		  digitTwo();
 80009dc:	f000 fd65 	bl	80014aa <digitTwo>
		  displayValue(hours);
 80009e0:	233e      	movs	r3, #62	; 0x3e
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fd16 	bl	8001418 <displayValue>
		  HAL_Delay(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 ff4f 	bl	8001890 <HAL_Delay>
		  displayOff();
 80009f2:	f000 fc41 	bl	8001278 <displayOff>
	  }

	  uint8_t tensValue;
	  tensValue = minutes / 10;
 80009f6:	2538      	movs	r5, #56	; 0x38
 80009f8:	197c      	adds	r4, r7, r5
 80009fa:	263d      	movs	r6, #61	; 0x3d
 80009fc:	19bb      	adds	r3, r7, r6
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	210a      	movs	r1, #10
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fb8a 	bl	800011c <__udivsi3>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
	  digitThree();
 8000a0c:	f000 fd60 	bl	80014d0 <digitThree>
	  displayValue(tensValue);
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fcff 	bl	8001418 <displayValue>
	  HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 ff38 	bl	8001890 <HAL_Delay>
	  displayOff();
 8000a20:	f000 fc2a 	bl	8001278 <displayOff>
	  digitFour();
 8000a24:	f000 fd67 	bl	80014f6 <digitFour>

	  displayValue(minutes - (tensValue * 10));
 8000a28:	197b      	adds	r3, r7, r5
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	1c1a      	adds	r2, r3, #0
 8000a2e:	0152      	lsls	r2, r2, #5
 8000a30:	1ad2      	subs	r2, r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	18db      	adds	r3, r3, r3
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	19bb      	adds	r3, r7, r6
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fce8 	bl	8001418 <displayValue>

	  HAL_Delay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 ff21 	bl	8001890 <HAL_Delay>
	  displayOff();
 8000a4e:	f000 fc13 	bl	8001278 <displayOff>

	  // Clear out any previous commands
	  commandValue = 0;
 8000a52:	2135      	movs	r1, #53	; 0x35
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]

	  // Determine if any new commands have been sent
	  HAL_UART_Receive(&huart2, &commandValue, 1, 0);
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	1879      	adds	r1, r7, r1
 8000a5e:	4867      	ldr	r0, [pc, #412]	; (8000bfc <main+0x380>)
 8000a60:	2300      	movs	r3, #0
 8000a62:	2201      	movs	r2, #1
 8000a64:	f002 fd80 	bl	8003568 <HAL_UART_Receive>
	  switch(commandValue)
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3b64      	subs	r3, #100	; 0x64
 8000a6e:	2b15      	cmp	r3, #21
 8000a70:	d900      	bls.n	8000a74 <main+0x1f8>
 8000a72:	e274      	b.n	8000f5e <main+0x6e2>
 8000a74:	009a      	lsls	r2, r3, #2
 8000a76:	4b62      	ldr	r3, [pc, #392]	; (8000c00 <main+0x384>)
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	469f      	mov	pc, r3
	  {
		  case 'h':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - hours:\r\n"), 500);
 8000a7e:	4a61      	ldr	r2, [pc, #388]	; (8000c04 <main+0x388>)
 8000a80:	003b      	movs	r3, r7
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f003 f955 	bl	8003d34 <siprintf>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	0039      	movs	r1, r7
 8000a94:	4859      	ldr	r0, [pc, #356]	; (8000bfc <main+0x380>)
 8000a96:	f002 fcbd 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000a9a:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <main+0x38c>)
 8000a9c:	2537      	movs	r5, #55	; 0x37
 8000a9e:	1979      	adds	r1, r7, r5
 8000aa0:	4856      	ldr	r0, [pc, #344]	; (8000bfc <main+0x380>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f002 fd60 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000aa8:	197b      	adds	r3, r7, r5
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3b30      	subs	r3, #48	; 0x30
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4c52      	ldr	r4, [pc, #328]	; (8000bfc <main+0x380>)
 8000ab2:	931d      	str	r3, [sp, #116]	; 0x74
 8000ab4:	466b      	mov	r3, sp
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	0023      	movs	r3, r4
 8000aba:	3310      	adds	r3, #16
 8000abc:	2274      	movs	r2, #116	; 0x74
 8000abe:	0019      	movs	r1, r3
 8000ac0:	f003 f926 	bl	8003d10 <memcpy>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	6861      	ldr	r1, [r4, #4]
 8000ac8:	68a2      	ldr	r2, [r4, #8]
 8000aca:	68e3      	ldr	r3, [r4, #12]
 8000acc:	f000 fbae 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000ad0:	4b4d      	ldr	r3, [pc, #308]	; (8000c08 <main+0x38c>)
 8000ad2:	2636      	movs	r6, #54	; 0x36
 8000ad4:	19b9      	adds	r1, r7, r6
 8000ad6:	4849      	ldr	r0, [pc, #292]	; (8000bfc <main+0x380>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f002 fd45 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000ade:	19bb      	adds	r3, r7, r6
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	3b30      	subs	r3, #48	; 0x30
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4c45      	ldr	r4, [pc, #276]	; (8000bfc <main+0x380>)
 8000ae8:	931d      	str	r3, [sp, #116]	; 0x74
 8000aea:	466b      	mov	r3, sp
 8000aec:	0018      	movs	r0, r3
 8000aee:	0023      	movs	r3, r4
 8000af0:	3310      	adds	r3, #16
 8000af2:	2274      	movs	r2, #116	; 0x74
 8000af4:	0019      	movs	r1, r3
 8000af6:	f003 f90b 	bl	8003d10 <memcpy>
 8000afa:	6820      	ldr	r0, [r4, #0]
 8000afc:	6861      	ldr	r1, [r4, #4]
 8000afe:	68a2      	ldr	r2, [r4, #8]
 8000b00:	68e3      	ldr	r3, [r4, #12]
 8000b02:	f000 fb93 	bl	800122c <sendUARTByte>
			  writeHours(hi2c1, (value-48), (value2-48));
 8000b06:	197b      	adds	r3, r7, r5
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3b30      	subs	r3, #48	; 0x30
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	19ba      	adds	r2, r7, r6
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	3a30      	subs	r2, #48	; 0x30
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	4c38      	ldr	r4, [pc, #224]	; (8000bf8 <main+0x37c>)
 8000b18:	9210      	str	r2, [sp, #64]	; 0x40
 8000b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000b1c:	466b      	mov	r3, sp
 8000b1e:	0018      	movs	r0, r3
 8000b20:	0023      	movs	r3, r4
 8000b22:	3310      	adds	r3, #16
 8000b24:	223c      	movs	r2, #60	; 0x3c
 8000b26:	0019      	movs	r1, r3
 8000b28:	f003 f8f2 	bl	8003d10 <memcpy>
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	6861      	ldr	r1, [r4, #4]
 8000b30:	68a2      	ldr	r2, [r4, #8]
 8000b32:	68e3      	ldr	r3, [r4, #12]
 8000b34:	f7ff fde6 	bl	8000704 <writeHours>
			  break;
 8000b38:	e212      	b.n	8000f60 <main+0x6e4>
		  case 'm':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - minutes:\r\n"), 500);
 8000b3a:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <main+0x390>)
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 f8f7 	bl	8003d34 <siprintf>
 8000b46:	0003      	movs	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	23fa      	movs	r3, #250	; 0xfa
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	0039      	movs	r1, r7
 8000b50:	482a      	ldr	r0, [pc, #168]	; (8000bfc <main+0x380>)
 8000b52:	f002 fc5f 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <main+0x38c>)
 8000b58:	2537      	movs	r5, #55	; 0x37
 8000b5a:	1979      	adds	r1, r7, r5
 8000b5c:	4827      	ldr	r0, [pc, #156]	; (8000bfc <main+0x380>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f002 fd02 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3b30      	subs	r3, #48	; 0x30
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4c23      	ldr	r4, [pc, #140]	; (8000bfc <main+0x380>)
 8000b6e:	931d      	str	r3, [sp, #116]	; 0x74
 8000b70:	466b      	mov	r3, sp
 8000b72:	0018      	movs	r0, r3
 8000b74:	0023      	movs	r3, r4
 8000b76:	3310      	adds	r3, #16
 8000b78:	2274      	movs	r2, #116	; 0x74
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	f003 f8c8 	bl	8003d10 <memcpy>
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	6861      	ldr	r1, [r4, #4]
 8000b84:	68a2      	ldr	r2, [r4, #8]
 8000b86:	68e3      	ldr	r3, [r4, #12]
 8000b88:	f000 fb50 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <main+0x38c>)
 8000b8e:	2636      	movs	r6, #54	; 0x36
 8000b90:	19b9      	adds	r1, r7, r6
 8000b92:	481a      	ldr	r0, [pc, #104]	; (8000bfc <main+0x380>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	f002 fce7 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000b9a:	19bb      	adds	r3, r7, r6
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3b30      	subs	r3, #48	; 0x30
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4c16      	ldr	r4, [pc, #88]	; (8000bfc <main+0x380>)
 8000ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8000ba6:	466b      	mov	r3, sp
 8000ba8:	0018      	movs	r0, r3
 8000baa:	0023      	movs	r3, r4
 8000bac:	3310      	adds	r3, #16
 8000bae:	2274      	movs	r2, #116	; 0x74
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	f003 f8ad 	bl	8003d10 <memcpy>
 8000bb6:	6820      	ldr	r0, [r4, #0]
 8000bb8:	6861      	ldr	r1, [r4, #4]
 8000bba:	68a2      	ldr	r2, [r4, #8]
 8000bbc:	68e3      	ldr	r3, [r4, #12]
 8000bbe:	f000 fb35 	bl	800122c <sendUARTByte>
			  writeMinutes(hi2c1, (value-48), (value2-48));
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	3b30      	subs	r3, #48	; 0x30
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	19ba      	adds	r2, r7, r6
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	3a30      	subs	r2, #48	; 0x30
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	4c09      	ldr	r4, [pc, #36]	; (8000bf8 <main+0x37c>)
 8000bd4:	9210      	str	r2, [sp, #64]	; 0x40
 8000bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000bd8:	466b      	mov	r3, sp
 8000bda:	0018      	movs	r0, r3
 8000bdc:	0023      	movs	r3, r4
 8000bde:	3310      	adds	r3, #16
 8000be0:	223c      	movs	r2, #60	; 0x3c
 8000be2:	0019      	movs	r1, r3
 8000be4:	f003 f894 	bl	8003d10 <memcpy>
 8000be8:	6820      	ldr	r0, [r4, #0]
 8000bea:	6861      	ldr	r1, [r4, #4]
 8000bec:	68a2      	ldr	r2, [r4, #8]
 8000bee:	68e3      	ldr	r3, [r4, #12]
 8000bf0:	f7ff fdc6 	bl	8000780 <writeMinutes>
			  break;
 8000bf4:	e1b4      	b.n	8000f60 <main+0x6e4>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	200000c0 	.word	0x200000c0
 8000bfc:	2000018c 	.word	0x2000018c
 8000c00:	080046b4 	.word	0x080046b4
 8000c04:	08004584 	.word	0x08004584
 8000c08:	00002710 	.word	0x00002710
 8000c0c:	080045a0 	.word	0x080045a0
		  case 's':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - seconds:\r\n"), 500);
 8000c10:	4ad4      	ldr	r2, [pc, #848]	; (8000f64 <main+0x6e8>)
 8000c12:	003b      	movs	r3, r7
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f003 f88c 	bl	8003d34 <siprintf>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	23fa      	movs	r3, #250	; 0xfa
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	0039      	movs	r1, r7
 8000c26:	48d0      	ldr	r0, [pc, #832]	; (8000f68 <main+0x6ec>)
 8000c28:	f002 fbf4 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000c2c:	4bcf      	ldr	r3, [pc, #828]	; (8000f6c <main+0x6f0>)
 8000c2e:	2537      	movs	r5, #55	; 0x37
 8000c30:	1979      	adds	r1, r7, r5
 8000c32:	48cd      	ldr	r0, [pc, #820]	; (8000f68 <main+0x6ec>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	f002 fc97 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3b30      	subs	r3, #48	; 0x30
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4cc9      	ldr	r4, [pc, #804]	; (8000f68 <main+0x6ec>)
 8000c44:	931d      	str	r3, [sp, #116]	; 0x74
 8000c46:	466b      	mov	r3, sp
 8000c48:	0018      	movs	r0, r3
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	2274      	movs	r2, #116	; 0x74
 8000c50:	0019      	movs	r1, r3
 8000c52:	f003 f85d 	bl	8003d10 <memcpy>
 8000c56:	6820      	ldr	r0, [r4, #0]
 8000c58:	6861      	ldr	r1, [r4, #4]
 8000c5a:	68a2      	ldr	r2, [r4, #8]
 8000c5c:	68e3      	ldr	r3, [r4, #12]
 8000c5e:	f000 fae5 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000c62:	4bc2      	ldr	r3, [pc, #776]	; (8000f6c <main+0x6f0>)
 8000c64:	2636      	movs	r6, #54	; 0x36
 8000c66:	19b9      	adds	r1, r7, r6
 8000c68:	48bf      	ldr	r0, [pc, #764]	; (8000f68 <main+0x6ec>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f002 fc7c 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000c70:	19bb      	adds	r3, r7, r6
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3b30      	subs	r3, #48	; 0x30
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4cbb      	ldr	r4, [pc, #748]	; (8000f68 <main+0x6ec>)
 8000c7a:	931d      	str	r3, [sp, #116]	; 0x74
 8000c7c:	466b      	mov	r3, sp
 8000c7e:	0018      	movs	r0, r3
 8000c80:	0023      	movs	r3, r4
 8000c82:	3310      	adds	r3, #16
 8000c84:	2274      	movs	r2, #116	; 0x74
 8000c86:	0019      	movs	r1, r3
 8000c88:	f003 f842 	bl	8003d10 <memcpy>
 8000c8c:	6820      	ldr	r0, [r4, #0]
 8000c8e:	6861      	ldr	r1, [r4, #4]
 8000c90:	68a2      	ldr	r2, [r4, #8]
 8000c92:	68e3      	ldr	r3, [r4, #12]
 8000c94:	f000 faca 	bl	800122c <sendUARTByte>
			  writeSeconds(hi2c1, (value - 48), (value2 - 48));
 8000c98:	197b      	adds	r3, r7, r5
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3b30      	subs	r3, #48	; 0x30
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	19ba      	adds	r2, r7, r6
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	3a30      	subs	r2, #48	; 0x30
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	4cb1      	ldr	r4, [pc, #708]	; (8000f70 <main+0x6f4>)
 8000caa:	9210      	str	r2, [sp, #64]	; 0x40
 8000cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cae:	466b      	mov	r3, sp
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	3310      	adds	r3, #16
 8000cb6:	223c      	movs	r2, #60	; 0x3c
 8000cb8:	0019      	movs	r1, r3
 8000cba:	f003 f829 	bl	8003d10 <memcpy>
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	6861      	ldr	r1, [r4, #4]
 8000cc2:	68a2      	ldr	r2, [r4, #8]
 8000cc4:	68e3      	ldr	r3, [r4, #12]
 8000cc6:	f7ff fd99 	bl	80007fc <writeSeconds>
			  break;
 8000cca:	e149      	b.n	8000f60 <main+0x6e4>
		  case 'n':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - month:\r\n"), 500);
 8000ccc:	4aa9      	ldr	r2, [pc, #676]	; (8000f74 <main+0x6f8>)
 8000cce:	003b      	movs	r3, r7
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 f82e 	bl	8003d34 <siprintf>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	23fa      	movs	r3, #250	; 0xfa
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	0039      	movs	r1, r7
 8000ce2:	48a1      	ldr	r0, [pc, #644]	; (8000f68 <main+0x6ec>)
 8000ce4:	f002 fb96 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000ce8:	4ba0      	ldr	r3, [pc, #640]	; (8000f6c <main+0x6f0>)
 8000cea:	2537      	movs	r5, #55	; 0x37
 8000cec:	1979      	adds	r1, r7, r5
 8000cee:	489e      	ldr	r0, [pc, #632]	; (8000f68 <main+0x6ec>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f002 fc39 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000cf6:	197b      	adds	r3, r7, r5
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3b30      	subs	r3, #48	; 0x30
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4c9a      	ldr	r4, [pc, #616]	; (8000f68 <main+0x6ec>)
 8000d00:	931d      	str	r3, [sp, #116]	; 0x74
 8000d02:	466b      	mov	r3, sp
 8000d04:	0018      	movs	r0, r3
 8000d06:	0023      	movs	r3, r4
 8000d08:	3310      	adds	r3, #16
 8000d0a:	2274      	movs	r2, #116	; 0x74
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	f002 ffff 	bl	8003d10 <memcpy>
 8000d12:	6820      	ldr	r0, [r4, #0]
 8000d14:	6861      	ldr	r1, [r4, #4]
 8000d16:	68a2      	ldr	r2, [r4, #8]
 8000d18:	68e3      	ldr	r3, [r4, #12]
 8000d1a:	f000 fa87 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000d1e:	4b93      	ldr	r3, [pc, #588]	; (8000f6c <main+0x6f0>)
 8000d20:	2636      	movs	r6, #54	; 0x36
 8000d22:	19b9      	adds	r1, r7, r6
 8000d24:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x6ec>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	f002 fc1e 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000d2c:	19bb      	adds	r3, r7, r6
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4c8c      	ldr	r4, [pc, #560]	; (8000f68 <main+0x6ec>)
 8000d36:	931d      	str	r3, [sp, #116]	; 0x74
 8000d38:	466b      	mov	r3, sp
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	0023      	movs	r3, r4
 8000d3e:	3310      	adds	r3, #16
 8000d40:	2274      	movs	r2, #116	; 0x74
 8000d42:	0019      	movs	r1, r3
 8000d44:	f002 ffe4 	bl	8003d10 <memcpy>
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	6861      	ldr	r1, [r4, #4]
 8000d4c:	68a2      	ldr	r2, [r4, #8]
 8000d4e:	68e3      	ldr	r3, [r4, #12]
 8000d50:	f000 fa6c 	bl	800122c <sendUARTByte>
			  writeMonth(hi2c1, (value - 48), (value2 - 48));
 8000d54:	197b      	adds	r3, r7, r5
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b30      	subs	r3, #48	; 0x30
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	19ba      	adds	r2, r7, r6
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	3a30      	subs	r2, #48	; 0x30
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	4c82      	ldr	r4, [pc, #520]	; (8000f70 <main+0x6f4>)
 8000d66:	9210      	str	r2, [sp, #64]	; 0x40
 8000d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d6a:	466b      	mov	r3, sp
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	0023      	movs	r3, r4
 8000d70:	3310      	adds	r3, #16
 8000d72:	223c      	movs	r2, #60	; 0x3c
 8000d74:	0019      	movs	r1, r3
 8000d76:	f002 ffcb 	bl	8003d10 <memcpy>
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	6861      	ldr	r1, [r4, #4]
 8000d7e:	68a2      	ldr	r2, [r4, #8]
 8000d80:	68e3      	ldr	r3, [r4, #12]
 8000d82:	f7ff fc3f 	bl	8000604 <writeMonth>
			  break;
 8000d86:	e0eb      	b.n	8000f60 <main+0x6e4>
		  case 'd':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - day:\r\n"), 500);
 8000d88:	4a7b      	ldr	r2, [pc, #492]	; (8000f78 <main+0x6fc>)
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f002 ffd0 	bl	8003d34 <siprintf>
 8000d94:	0003      	movs	r3, r0
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	23fa      	movs	r3, #250	; 0xfa
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	0039      	movs	r1, r7
 8000d9e:	4872      	ldr	r0, [pc, #456]	; (8000f68 <main+0x6ec>)
 8000da0:	f002 fb38 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000da4:	4b71      	ldr	r3, [pc, #452]	; (8000f6c <main+0x6f0>)
 8000da6:	2537      	movs	r5, #55	; 0x37
 8000da8:	1979      	adds	r1, r7, r5
 8000daa:	486f      	ldr	r0, [pc, #444]	; (8000f68 <main+0x6ec>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	f002 fbdb 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000db2:	197b      	adds	r3, r7, r5
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b30      	subs	r3, #48	; 0x30
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4c6b      	ldr	r4, [pc, #428]	; (8000f68 <main+0x6ec>)
 8000dbc:	931d      	str	r3, [sp, #116]	; 0x74
 8000dbe:	466b      	mov	r3, sp
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	3310      	adds	r3, #16
 8000dc6:	2274      	movs	r2, #116	; 0x74
 8000dc8:	0019      	movs	r1, r3
 8000dca:	f002 ffa1 	bl	8003d10 <memcpy>
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	6861      	ldr	r1, [r4, #4]
 8000dd2:	68a2      	ldr	r2, [r4, #8]
 8000dd4:	68e3      	ldr	r3, [r4, #12]
 8000dd6:	f000 fa29 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000dda:	4b64      	ldr	r3, [pc, #400]	; (8000f6c <main+0x6f0>)
 8000ddc:	2636      	movs	r6, #54	; 0x36
 8000dde:	19b9      	adds	r1, r7, r6
 8000de0:	4861      	ldr	r0, [pc, #388]	; (8000f68 <main+0x6ec>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	f002 fbc0 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000de8:	19bb      	adds	r3, r7, r6
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3b30      	subs	r3, #48	; 0x30
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4c5d      	ldr	r4, [pc, #372]	; (8000f68 <main+0x6ec>)
 8000df2:	931d      	str	r3, [sp, #116]	; 0x74
 8000df4:	466b      	mov	r3, sp
 8000df6:	0018      	movs	r0, r3
 8000df8:	0023      	movs	r3, r4
 8000dfa:	3310      	adds	r3, #16
 8000dfc:	2274      	movs	r2, #116	; 0x74
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f002 ff86 	bl	8003d10 <memcpy>
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	68a2      	ldr	r2, [r4, #8]
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	f000 fa0e 	bl	800122c <sendUARTByte>
			  writeDay(hi2c1, (value - 48), (value2 - 48));
 8000e10:	197b      	adds	r3, r7, r5
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b30      	subs	r3, #48	; 0x30
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	19ba      	adds	r2, r7, r6
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	3a30      	subs	r2, #48	; 0x30
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	4c53      	ldr	r4, [pc, #332]	; (8000f70 <main+0x6f4>)
 8000e22:	9210      	str	r2, [sp, #64]	; 0x40
 8000e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e26:	466b      	mov	r3, sp
 8000e28:	0018      	movs	r0, r3
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	223c      	movs	r2, #60	; 0x3c
 8000e30:	0019      	movs	r1, r3
 8000e32:	f002 ff6d 	bl	8003d10 <memcpy>
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	6861      	ldr	r1, [r4, #4]
 8000e3a:	68a2      	ldr	r2, [r4, #8]
 8000e3c:	68e3      	ldr	r3, [r4, #12]
 8000e3e:	f7ff fc21 	bl	8000684 <writeDay>
			  break;
 8000e42:	e08d      	b.n	8000f60 <main+0x6e4>
		  case 'y':
			  HAL_UART_Transmit(&huart2, (uint8_t*)returnMessage, sprintf(returnMessage, "\r\nSet the clock - year:\r\n"), 500);
 8000e44:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <main+0x700>)
 8000e46:	003b      	movs	r3, r7
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 ff72 	bl	8003d34 <siprintf>
 8000e50:	0003      	movs	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	23fa      	movs	r3, #250	; 0xfa
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	0039      	movs	r1, r7
 8000e5a:	4843      	ldr	r0, [pc, #268]	; (8000f68 <main+0x6ec>)
 8000e5c:	f002 fada 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &value, 1, 10000);
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <main+0x6f0>)
 8000e62:	2537      	movs	r5, #55	; 0x37
 8000e64:	1979      	adds	r1, r7, r5
 8000e66:	4840      	ldr	r0, [pc, #256]	; (8000f68 <main+0x6ec>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f002 fb7d 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value-48);
 8000e6e:	197b      	adds	r3, r7, r5
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b30      	subs	r3, #48	; 0x30
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4c3c      	ldr	r4, [pc, #240]	; (8000f68 <main+0x6ec>)
 8000e78:	931d      	str	r3, [sp, #116]	; 0x74
 8000e7a:	466b      	mov	r3, sp
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	0023      	movs	r3, r4
 8000e80:	3310      	adds	r3, #16
 8000e82:	2274      	movs	r2, #116	; 0x74
 8000e84:	0019      	movs	r1, r3
 8000e86:	f002 ff43 	bl	8003d10 <memcpy>
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	6861      	ldr	r1, [r4, #4]
 8000e8e:	68a2      	ldr	r2, [r4, #8]
 8000e90:	68e3      	ldr	r3, [r4, #12]
 8000e92:	f000 f9cb 	bl	800122c <sendUARTByte>
			  HAL_UART_Receive(&huart2, &value2, 1, 10000);
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <main+0x6f0>)
 8000e98:	2636      	movs	r6, #54	; 0x36
 8000e9a:	19b9      	adds	r1, r7, r6
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <main+0x6ec>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f002 fb62 	bl	8003568 <HAL_UART_Receive>
			  sendUARTByte(huart2, value2-48);
 8000ea4:	19bb      	adds	r3, r7, r6
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	3b30      	subs	r3, #48	; 0x30
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4c2e      	ldr	r4, [pc, #184]	; (8000f68 <main+0x6ec>)
 8000eae:	931d      	str	r3, [sp, #116]	; 0x74
 8000eb0:	466b      	mov	r3, sp
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	0023      	movs	r3, r4
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	2274      	movs	r2, #116	; 0x74
 8000eba:	0019      	movs	r1, r3
 8000ebc:	f002 ff28 	bl	8003d10 <memcpy>
 8000ec0:	6820      	ldr	r0, [r4, #0]
 8000ec2:	6861      	ldr	r1, [r4, #4]
 8000ec4:	68a2      	ldr	r2, [r4, #8]
 8000ec6:	68e3      	ldr	r3, [r4, #12]
 8000ec8:	f000 f9b0 	bl	800122c <sendUARTByte>
			  writeYear(hi2c1, (value - 48), (value2 - 48));
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b30      	subs	r3, #48	; 0x30
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	19ba      	adds	r2, r7, r6
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	3a30      	subs	r2, #48	; 0x30
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	4c24      	ldr	r4, [pc, #144]	; (8000f70 <main+0x6f4>)
 8000ede:	9210      	str	r2, [sp, #64]	; 0x40
 8000ee0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ee2:	466b      	mov	r3, sp
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	0023      	movs	r3, r4
 8000ee8:	3310      	adds	r3, #16
 8000eea:	223c      	movs	r2, #60	; 0x3c
 8000eec:	0019      	movs	r1, r3
 8000eee:	f002 ff0f 	bl	8003d10 <memcpy>
 8000ef2:	6820      	ldr	r0, [r4, #0]
 8000ef4:	6861      	ldr	r1, [r4, #4]
 8000ef6:	68a2      	ldr	r2, [r4, #8]
 8000ef8:	68e3      	ldr	r3, [r4, #12]
 8000efa:	f7ff fb43 	bl	8000584 <writeYear>
			  break;
 8000efe:	e02f      	b.n	8000f60 <main+0x6e4>
		  case 'r':
			  HAL_UART_Transmit(&huart2, (uint8_t*)UARTBuffer, sprintf(UARTBuffer, "\r\nCurrent Time: %02d:%02d:%02d", hours, minutes, seconds), 500);
 8000f00:	233e      	movs	r3, #62	; 0x3e
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	233d      	movs	r3, #61	; 0x3d
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	781c      	ldrb	r4, [r3, #0]
 8000f0c:	233c      	movs	r3, #60	; 0x3c
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	491b      	ldr	r1, [pc, #108]	; (8000f80 <main+0x704>)
 8000f14:	481b      	ldr	r0, [pc, #108]	; (8000f84 <main+0x708>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	0023      	movs	r3, r4
 8000f1a:	f002 ff0b 	bl	8003d34 <siprintf>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	23fa      	movs	r3, #250	; 0xfa
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4917      	ldr	r1, [pc, #92]	; (8000f84 <main+0x708>)
 8000f28:	480f      	ldr	r0, [pc, #60]	; (8000f68 <main+0x6ec>)
 8000f2a:	f002 fa73 	bl	8003414 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t*)UARTBuffer, sprintf(UARTBuffer, "\r\nCurrent Date: %02d/%02d/%02d", month, day, year), 500);
 8000f2e:	233b      	movs	r3, #59	; 0x3b
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	233a      	movs	r3, #58	; 0x3a
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781c      	ldrb	r4, [r3, #0]
 8000f3a:	2339      	movs	r3, #57	; 0x39
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4911      	ldr	r1, [pc, #68]	; (8000f88 <main+0x70c>)
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <main+0x708>)
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	0023      	movs	r3, r4
 8000f48:	f002 fef4 	bl	8003d34 <siprintf>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	23fa      	movs	r3, #250	; 0xfa
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	490b      	ldr	r1, [pc, #44]	; (8000f84 <main+0x708>)
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <main+0x6ec>)
 8000f58:	f002 fa5c 	bl	8003414 <HAL_UART_Transmit>
			  break;
 8000f5c:	e000      	b.n	8000f60 <main+0x6e4>
		  default:
			  break;
 8000f5e:	46c0      	nop			; (mov r8, r8)
  {
 8000f60:	e499      	b.n	8000896 <main+0x1a>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	080045c0 	.word	0x080045c0
 8000f68:	2000018c 	.word	0x2000018c
 8000f6c:	00002710 	.word	0x00002710
 8000f70:	200000c0 	.word	0x200000c0
 8000f74:	080045e0 	.word	0x080045e0
 8000f78:	080045fc 	.word	0x080045fc
 8000f7c:	08004618 	.word	0x08004618
 8000f80:	08004634 	.word	0x08004634
 8000f84:	2000010c 	.word	0x2000010c
 8000f88:	08004654 	.word	0x08004654

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b099      	sub	sp, #100	; 0x64
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	242c      	movs	r4, #44	; 0x2c
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	0018      	movs	r0, r3
 8000f98:	2334      	movs	r3, #52	; 0x34
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f002 fec0 	bl	8003d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa2:	231c      	movs	r3, #28
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	2310      	movs	r3, #16
 8000faa:	001a      	movs	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	f002 feb8 	bl	8003d22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2318      	movs	r3, #24
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f002 feb1 	bl	8003d22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 fbd7 	bl	8002790 <HAL_RCC_OscConfig>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000fe6:	f000 f91b 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	211c      	movs	r1, #28
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2207      	movs	r2, #7
 8000ff0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f001 ff47 	bl	8002e9c <HAL_RCC_ClockConfig>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001012:	f000 f905 	bl	8001220 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2220      	movs	r2, #32
 800101a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	0018      	movs	r0, r3
 8001026:	f002 f8b3 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800102e:	f000 f8f7 	bl	8001220 <Error_Handler>
  }
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b019      	add	sp, #100	; 0x64
 8001038:	bd90      	pop	{r4, r7, pc}
	...

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_I2C1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_I2C1_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001078:	0018      	movs	r0, r3
 800107a:	f000 fe67 	bl	8001d4c <HAL_I2C_Init>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 f8cd 	bl	8001220 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001088:	2100      	movs	r1, #0
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fae8 	bl	8002660 <HAL_I2CEx_ConfigAnalogFilter>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 f8c4 	bl	8001220 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <MX_I2C1_Init+0x74>)
 800109a:	2100      	movs	r1, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f001 fb2b 	bl	80026f8 <HAL_I2CEx_ConfigDigitalFilter>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 f8bb 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000c0 	.word	0x200000c0
 80010b4:	40005400 	.word	0x40005400
 80010b8:	2000090e 	.word	0x2000090e

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_USART2_UART_Init+0x5c>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c8:	2296      	movs	r2, #150	; 0x96
 80010ca:	0212      	lsls	r2, r2, #8
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <MX_USART2_UART_Init+0x58>)
 8001100:	0018      	movs	r0, r3
 8001102:	f002 f933 	bl	800336c <HAL_UART_Init>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 f889 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000018c 	.word	0x2000018c
 8001118:	40004400 	.word	0x40004400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	240c      	movs	r4, #12
 8001124:	193b      	adds	r3, r7, r4
 8001126:	0018      	movs	r0, r3
 8001128:	2314      	movs	r3, #20
 800112a:	001a      	movs	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	f002 fdf8 	bl	8003d22 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	03c9      	lsls	r1, r1, #15
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	03db      	lsls	r3, r3, #15
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	0289      	lsls	r1, r1, #10
 8001158:	430a      	orrs	r2, r1
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_GPIO_Init+0xfc>)
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	029b      	lsls	r3, r3, #10
 8001164:	4013      	ands	r3, r2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_GPIO_Init+0xfc>)
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <MX_GPIO_Init+0xfc>)
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	02c9      	lsls	r1, r1, #11
 8001174:	430a      	orrs	r2, r1
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <MX_GPIO_Init+0xfc>)
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	02db      	lsls	r3, r3, #11
 8001180:	4013      	ands	r3, r2
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Anode1_Pin|Anode2_Pin|Anode3_Pin|Anode4_Pin
 8001186:	2390      	movs	r3, #144	; 0x90
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	2200      	movs	r2, #0
 800118c:	217b      	movs	r1, #123	; 0x7b
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fdbe 	bl	8001d10 <HAL_GPIO_WritePin>
                          |Anode5_Pin|Anode6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_GPIO_Init+0x100>)
 8001196:	2200      	movs	r2, #0
 8001198:	21fb      	movs	r1, #251	; 0xfb
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fdb8 	bl	8001d10 <HAL_GPIO_WritePin>
                          |Segment5_Pin|Segment6_Pin|Segment7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Anode1_Pin Anode2_Pin Anode3_Pin Anode4_Pin
                           Anode5_Pin Anode6_Pin */
  GPIO_InitStruct.Pin = Anode1_Pin|Anode2_Pin|Anode3_Pin|Anode4_Pin
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	227b      	movs	r2, #123	; 0x7b
 80011a4:	601a      	str	r2, [r3, #0]
                          |Anode5_Pin|Anode6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2201      	movs	r2, #1
 80011aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	193a      	adds	r2, r7, r4
 80011ba:	2390      	movs	r3, #144	; 0x90
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f000 fc3d 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Segment1_Pin Segment2_Pin Segment3_Pin Segment4_Pin
                           Segment5_Pin Segment6_Pin Segment7_Pin */
  GPIO_InitStruct.Pin = Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	22fb      	movs	r2, #251	; 0xfb
 80011ca:	601a      	str	r2, [r3, #0]
                          |Segment5_Pin|Segment6_Pin|Segment7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2201      	movs	r2, #1
 80011d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <MX_GPIO_Init+0x100>)
 80011e2:	0019      	movs	r1, r3
 80011e4:	0010      	movs	r0, r2
 80011e6:	f000 fc2b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BattVoltage_Pin */
  GPIO_InitStruct.Pin = BattVoltage_Pin;
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2203      	movs	r2, #3
 80011f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BattVoltage_GPIO_Port, &GPIO_InitStruct);
 8001200:	187a      	adds	r2, r7, r1
 8001202:	2390      	movs	r3, #144	; 0x90
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f000 fc19 	bl	8001a40 <HAL_GPIO_Init>

}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b009      	add	sp, #36	; 0x24
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <sendUARTByte>:
{
	HAL_UART_Transmit(&commChannel, (uint8_t*)UARTBuffer, sprintf(UARTBuffer, "\r\nUART Test"), 500);
}

void sendUARTByte(UART_HandleTypeDef commChannel, char outputByte)
{
 800122c:	b084      	sub	sp, #16
 800122e:	b5b0      	push	{r4, r5, r7, lr}
 8001230:	af00      	add	r7, sp, #0
 8001232:	2510      	movs	r5, #16
 8001234:	197c      	adds	r4, r7, r5
 8001236:	6020      	str	r0, [r4, #0]
 8001238:	6061      	str	r1, [r4, #4]
 800123a:	60a2      	str	r2, [r4, #8]
 800123c:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&commChannel, (uint8_t*)UARTBuffer, sprintf(UARTBuffer, "\r\nOutput Value: %d", outputByte), 500);
 800123e:	2384      	movs	r3, #132	; 0x84
 8001240:	2210      	movs	r2, #16
 8001242:	4694      	mov	ip, r2
 8001244:	44bc      	add	ip, r7
 8001246:	4463      	add	r3, ip
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4909      	ldr	r1, [pc, #36]	; (8001270 <sendUARTByte+0x44>)
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <sendUARTByte+0x48>)
 800124e:	0018      	movs	r0, r3
 8001250:	f002 fd70 	bl	8003d34 <siprintf>
 8001254:	0003      	movs	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	23fa      	movs	r3, #250	; 0xfa
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4905      	ldr	r1, [pc, #20]	; (8001274 <sendUARTByte+0x48>)
 800125e:	1978      	adds	r0, r7, r5
 8001260:	f002 f8d8 	bl	8003414 <HAL_UART_Transmit>
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bcb0      	pop	{r4, r5, r7}
 800126a:	bc08      	pop	{r3}
 800126c:	b004      	add	sp, #16
 800126e:	4718      	bx	r3
 8001270:	08004680 	.word	0x08004680
 8001274:	2000010c 	.word	0x2000010c

08001278 <displayOff>:
#include "sevenSegment.h"


// Function declarations
void displayOff(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_INACTIVE);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <displayOff+0x18>)
 800127e:	2200      	movs	r2, #0
 8001280:	21fb      	movs	r1, #251	; 0xfb
 8001282:	0018      	movs	r0, r3
 8001284:	f000 fd44 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	48000400 	.word	0x48000400

08001294 <displayZero>:
void displayZero(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin, SEGMENT_ACTIVE);
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <displayZero+0x24>)
 800129a:	2201      	movs	r2, #1
 800129c:	217b      	movs	r1, #123	; 0x7b
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 fd36 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment7_Pin, SEGMENT_INACTIVE);
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <displayZero+0x24>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fd30 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	48000400 	.word	0x48000400

080012bc <displayOne>:

void displayOne(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment2_Pin|Segment3_Pin, SEGMENT_ACTIVE);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <displayOne+0x24>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	210a      	movs	r1, #10
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fd22 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_INACTIVE);
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <displayOne+0x24>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	21f1      	movs	r1, #241	; 0xf1
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fd1c 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	48000400 	.word	0x48000400

080012e4 <displayTwo>:

void displayTwo(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment4_Pin|Segment5_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <displayTwo+0x24>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	21b3      	movs	r1, #179	; 0xb3
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 fd0e 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment3_Pin|Segment6_Pin, SEGMENT_INACTIVE);
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <displayTwo+0x24>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	2148      	movs	r1, #72	; 0x48
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fd08 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	48000400 	.word	0x48000400

0800130c <displayThree>:

void displayThree(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <displayThree+0x24>)
 8001312:	2201      	movs	r2, #1
 8001314:	219b      	movs	r1, #155	; 0x9b
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fcfa 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment5_Pin|Segment6_Pin, SEGMENT_INACTIVE);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <displayThree+0x24>)
 800131e:	2200      	movs	r2, #0
 8001320:	2160      	movs	r1, #96	; 0x60
 8001322:	0018      	movs	r0, r3
 8001324:	f000 fcf4 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	48000400 	.word	0x48000400

08001334 <displayFour>:

void displayFour(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment2_Pin|Segment3_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <displayFour+0x24>)
 800133a:	2201      	movs	r2, #1
 800133c:	21ca      	movs	r1, #202	; 0xca
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fce6 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment4_Pin|Segment5_Pin, SEGMENT_INACTIVE);
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <displayFour+0x24>)
 8001346:	2200      	movs	r2, #0
 8001348:	2131      	movs	r1, #49	; 0x31
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fce0 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	48000400 	.word	0x48000400

0800135c <displayFive>:

void displayFive(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment3_Pin|Segment4_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <displayFive+0x24>)
 8001362:	2201      	movs	r2, #1
 8001364:	21d9      	movs	r1, #217	; 0xd9
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fcd2 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment2_Pin|Segment5_Pin, SEGMENT_INACTIVE);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <displayFive+0x24>)
 800136e:	2200      	movs	r2, #0
 8001370:	2122      	movs	r1, #34	; 0x22
 8001372:	0018      	movs	r0, r3
 8001374:	f000 fccc 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	48000400 	.word	0x48000400

08001384 <displaySix>:

void displaySix(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <displaySix+0x24>)
 800138a:	2201      	movs	r2, #1
 800138c:	21f9      	movs	r1, #249	; 0xf9
 800138e:	0018      	movs	r0, r3
 8001390:	f000 fcbe 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment2_Pin, SEGMENT_INACTIVE);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <displaySix+0x24>)
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fcb8 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	48000400 	.word	0x48000400

080013ac <displaySeven>:

void displaySeven(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin, SEGMENT_ACTIVE);
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <displaySeven+0x24>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	210b      	movs	r1, #11
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 fcaa 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_INACTIVE);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <displaySeven+0x24>)
 80013be:	2200      	movs	r2, #0
 80013c0:	21f0      	movs	r1, #240	; 0xf0
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fca4 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	48000400 	.word	0x48000400

080013d4 <displayEight>:

void displayEight(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment5_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <displayEight+0x18>)
 80013da:	2201      	movs	r2, #1
 80013dc:	21fb      	movs	r1, #251	; 0xfb
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 fc96 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	48000400 	.word	0x48000400

080013f0 <displayNine>:

void displayNine(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Segment1_Pin|Segment2_Pin|Segment3_Pin|Segment4_Pin|Segment6_Pin|Segment7_Pin, SEGMENT_ACTIVE);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <displayNine+0x24>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	21db      	movs	r1, #219	; 0xdb
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 fc88 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Segment5_Pin, SEGMENT_INACTIVE);
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <displayNine+0x24>)
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fc82 	bl	8001d10 <HAL_GPIO_WritePin>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	48000400 	.word	0x48000400

08001418 <displayValue>:

void displayValue(uint8_t value)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	0002      	movs	r2, r0
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	701a      	strb	r2, [r3, #0]
	switch(value)
 8001424:	1dfb      	adds	r3, r7, #7
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d822      	bhi.n	8001472 <displayValue+0x5a>
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <displayValue+0x68>)
 8001430:	18d3      	adds	r3, r2, r3
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	469f      	mov	pc, r3
	{
		case 0:
		  displayZero();
 8001436:	f7ff ff2d 	bl	8001294 <displayZero>
		  break;
 800143a:	e01d      	b.n	8001478 <displayValue+0x60>
		case 1:
		  displayOne();
 800143c:	f7ff ff3e 	bl	80012bc <displayOne>
		  break;
 8001440:	e01a      	b.n	8001478 <displayValue+0x60>
		case 2:
		  displayTwo();
 8001442:	f7ff ff4f 	bl	80012e4 <displayTwo>
		  break;
 8001446:	e017      	b.n	8001478 <displayValue+0x60>
		case 3:
		  displayThree();
 8001448:	f7ff ff60 	bl	800130c <displayThree>
		  break;
 800144c:	e014      	b.n	8001478 <displayValue+0x60>
		case 4:
		  displayFour();
 800144e:	f7ff ff71 	bl	8001334 <displayFour>
		  break;
 8001452:	e011      	b.n	8001478 <displayValue+0x60>
		case 5:
		  displayFive();
 8001454:	f7ff ff82 	bl	800135c <displayFive>
		  break;
 8001458:	e00e      	b.n	8001478 <displayValue+0x60>
		case 6:
		  displaySix();
 800145a:	f7ff ff93 	bl	8001384 <displaySix>
		  break;
 800145e:	e00b      	b.n	8001478 <displayValue+0x60>
		case 7:
		  displaySeven();
 8001460:	f7ff ffa4 	bl	80013ac <displaySeven>
		  break;
 8001464:	e008      	b.n	8001478 <displayValue+0x60>
		case 8:
		  displayEight();
 8001466:	f7ff ffb5 	bl	80013d4 <displayEight>
		  break;
 800146a:	e005      	b.n	8001478 <displayValue+0x60>
		case 9:
			displayNine();
 800146c:	f7ff ffc0 	bl	80013f0 <displayNine>
			break;
 8001470:	e002      	b.n	8001478 <displayValue+0x60>
		default:
			displayOff();
 8001472:	f7ff ff01 	bl	8001278 <displayOff>
			break;
 8001476:	46c0      	nop			; (mov r8, r8)
	}
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800470c 	.word	0x0800470c

08001484 <digitOne>:


void digitOne(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Anode1_Pin, DIGIT_ACTIVE);
 8001488:	2390      	movs	r3, #144	; 0x90
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	2201      	movs	r2, #1
 800148e:	2101      	movs	r1, #1
 8001490:	0018      	movs	r0, r3
 8001492:	f000 fc3d 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Anode2_Pin|Anode3_Pin|Anode4_Pin|Anode5_Pin|Anode6_Pin, DIGIT_INACTIVE);
 8001496:	2390      	movs	r3, #144	; 0x90
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	2200      	movs	r2, #0
 800149c:	217a      	movs	r1, #122	; 0x7a
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fc36 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <digitTwo>:

void digitTwo(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Anode2_Pin, DIGIT_ACTIVE);
 80014ae:	2390      	movs	r3, #144	; 0x90
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	2201      	movs	r2, #1
 80014b4:	2102      	movs	r1, #2
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fc2a 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Anode1_Pin|Anode3_Pin|Anode4_Pin|Anode5_Pin|Anode6_Pin, DIGIT_INACTIVE);
 80014bc:	2390      	movs	r3, #144	; 0x90
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2200      	movs	r2, #0
 80014c2:	2179      	movs	r1, #121	; 0x79
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 fc23 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <digitThree>:

void digitThree(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Anode3_Pin, DIGIT_ACTIVE);
 80014d4:	2390      	movs	r3, #144	; 0x90
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	2201      	movs	r2, #1
 80014da:	2108      	movs	r1, #8
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 fc17 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Anode1_Pin|Anode2_Pin|Anode4_Pin|Anode5_Pin|Anode6_Pin, DIGIT_INACTIVE);
 80014e2:	2390      	movs	r3, #144	; 0x90
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	2200      	movs	r2, #0
 80014e8:	2173      	movs	r1, #115	; 0x73
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fc10 	bl	8001d10 <HAL_GPIO_WritePin>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <digitFour>:

void digitFour(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Anode4_Pin, DIGIT_ACTIVE);
 80014fa:	2390      	movs	r3, #144	; 0x90
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	2201      	movs	r2, #1
 8001500:	2110      	movs	r1, #16
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fc04 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Anode1_Pin|Anode2_Pin|Anode3_Pin|Anode5_Pin|Anode6_Pin, DIGIT_INACTIVE);
 8001508:	2390      	movs	r3, #144	; 0x90
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	2200      	movs	r2, #0
 800150e:	216b      	movs	r1, #107	; 0x6b
 8001510:	0018      	movs	r0, r3
 8001512:	f000 fbfd 	bl	8001d10 <HAL_GPIO_WritePin>
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x44>)
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_MspInit+0x44>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x44>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x44>)
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_MspInit+0x44>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0549      	lsls	r1, r1, #21
 8001544:	430a      	orrs	r2, r1
 8001546:	61da      	str	r2, [r3, #28]
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_MspInit+0x44>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	4013      	ands	r3, r2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	2414      	movs	r4, #20
 800156e:	193b      	adds	r3, r7, r4
 8001570:	0018      	movs	r0, r3
 8001572:	2314      	movs	r3, #20
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f002 fbd3 	bl	8003d22 <memset>
  if(hi2c->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_I2C_MspInit+0x94>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d133      	bne.n	80015ee <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_I2C_MspInit+0x98>)
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_I2C_MspInit+0x98>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0289      	lsls	r1, r1, #10
 8001590:	430a      	orrs	r2, r1
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0x98>)
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA11     ------> I2C1_SCL
    PA12     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	22c0      	movs	r2, #192	; 0xc0
 80015a6:	0152      	lsls	r2, r2, #5
 80015a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	0021      	movs	r1, r4
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2212      	movs	r2, #18
 80015b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2201      	movs	r2, #1
 80015b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2203      	movs	r2, #3
 80015bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C1;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2205      	movs	r2, #5
 80015c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	187a      	adds	r2, r7, r1
 80015c6:	2390      	movs	r3, #144	; 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 fa37 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_I2C_MspInit+0x98>)
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_I2C_MspInit+0x98>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0389      	lsls	r1, r1, #14
 80015dc:	430a      	orrs	r2, r1
 80015de:	61da      	str	r2, [r3, #28]
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_I2C_MspInit+0x98>)
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	039b      	lsls	r3, r3, #14
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b00b      	add	sp, #44	; 0x2c
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	2414      	movs	r4, #20
 800160a:	193b      	adds	r3, r7, r4
 800160c:	0018      	movs	r0, r3
 800160e:	2314      	movs	r3, #20
 8001610:	001a      	movs	r2, r3
 8001612:	2100      	movs	r1, #0
 8001614:	f002 fb85 	bl	8003d22 <memset>
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_UART_MspInit+0x90>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d132      	bne.n	8001688 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_UART_MspInit+0x94>)
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x94>)
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	0289      	lsls	r1, r1, #10
 800162c:	430a      	orrs	r2, r1
 800162e:	61da      	str	r2, [r3, #28]
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_UART_MspInit+0x94>)
 8001632:	69da      	ldr	r2, [r3, #28]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x94>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_UART_MspInit+0x94>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0289      	lsls	r1, r1, #10
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_UART_MspInit+0x94>)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	029b      	lsls	r3, r3, #10
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800165a:	0021      	movs	r1, r4
 800165c:	187b      	adds	r3, r7, r1
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2202      	movs	r2, #2
 8001666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2203      	movs	r2, #3
 8001672:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2201      	movs	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	187a      	adds	r2, r7, r1
 800167c:	2390      	movs	r3, #144	; 0x90
 800167e:	05db      	lsls	r3, r3, #23
 8001680:	0011      	movs	r1, r2
 8001682:	0018      	movs	r0, r3
 8001684:	f000 f9dc 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b00b      	add	sp, #44	; 0x2c
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	40004400 	.word	0x40004400
 8001694:	40021000 	.word	0x40021000
 8001698:	00008004 	.word	0x00008004

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 f8ca 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f002 fade 	bl	8003cbc <__errno>
 8001700:	0003      	movs	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	2301      	movs	r3, #1
 8001708:	425b      	negs	r3, r3
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	18d2      	adds	r2, r2, r3
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <_sbrk+0x64>)
 800171c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b006      	add	sp, #24
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20001800 	.word	0x20001800
 800172c:	00000400 	.word	0x00000400
 8001730:	2000008c 	.word	0x2000008c
 8001734:	20000228 	.word	0x20000228

08001738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001746:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <LoopForever+0x6>)
    LDR R1, [R0]
 800174a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800174c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <LoopForever+0xa>)
    CMP R1, R2
 8001750:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001752:	d105      	bne.n	8001760 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001756:	4913      	ldr	r1, [pc, #76]	; (80017a4 <LoopForever+0x12>)
    STR R1, [R0]
 8001758:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800175a:	4813      	ldr	r0, [pc, #76]	; (80017a8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800175c:	4913      	ldr	r1, [pc, #76]	; (80017ac <LoopForever+0x1a>)
    STR R1, [R0]
 800175e:	6001      	str	r1, [r0, #0]

08001760 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001762:	4914      	ldr	r1, [pc, #80]	; (80017b4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <LoopForever+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a11      	ldr	r2, [pc, #68]	; (80017bc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001778:	4c11      	ldr	r4, [pc, #68]	; (80017c0 <LoopForever+0x2e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001786:	f7ff ffd7 	bl	8001738 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800178a:	f002 fa9d 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff f875 	bl	800087c <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   r0, =_estack
 8001794:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001798:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800179c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80017a0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80017a4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80017a8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80017ac:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017b8:	08004788 	.word	0x08004788
  ldr r2, =_sbss
 80017bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017c0:	20000224 	.word	0x20000224

080017c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC1_IRQHandler>
	...

080017c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_Init+0x24>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_Init+0x24>)
 80017d2:	2110      	movs	r1, #16
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 f809 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017de:	f7ff fe9d 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_InitTick+0x5c>)
 80017fa:	681c      	ldr	r4, [r3, #0]
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <HAL_InitTick+0x60>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	0019      	movs	r1, r3
 8001802:	23fa      	movs	r3, #250	; 0xfa
 8001804:	0098      	lsls	r0, r3, #2
 8001806:	f7fe fc89 	bl	800011c <__udivsi3>
 800180a:	0003      	movs	r3, r0
 800180c:	0019      	movs	r1, r3
 800180e:	0020      	movs	r0, r4
 8001810:	f7fe fc84 	bl	800011c <__udivsi3>
 8001814:	0003      	movs	r3, r0
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f905 	bl	8001a26 <HAL_SYSTICK_Config>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e00f      	b.n	8001844 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d80b      	bhi.n	8001842 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	2301      	movs	r3, #1
 800182e:	425b      	negs	r3, r3
 8001830:	2200      	movs	r2, #0
 8001832:	0018      	movs	r0, r3
 8001834:	f000 f8e2 	bl	80019fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_InitTick+0x64>)
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b003      	add	sp, #12
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x1c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_IncTick+0x20>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	18d2      	adds	r2, r2, r3
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_IncTick+0x20>)
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	20000008 	.word	0x20000008
 8001878:	20000210 	.word	0x20000210

0800187c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_GetTick+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000210 	.word	0x20000210

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fff0 	bl	800187c <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	001a      	movs	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	189b      	adds	r3, r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	f7ff ffe0 	bl	800187c <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	20000008 	.word	0x20000008

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	0002      	movs	r2, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b7f      	cmp	r3, #127	; 0x7f
 80018ec:	d828      	bhi.n	8001940 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <__NVIC_SetPriority+0xd4>)
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	33c0      	adds	r3, #192	; 0xc0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	589b      	ldr	r3, [r3, r2]
 80018fe:	1dfa      	adds	r2, r7, #7
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	0011      	movs	r1, r2
 8001904:	2203      	movs	r2, #3
 8001906:	400a      	ands	r2, r1
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	21ff      	movs	r1, #255	; 0xff
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	43d2      	mvns	r2, r2
 8001912:	401a      	ands	r2, r3
 8001914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	401a      	ands	r2, r3
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0018      	movs	r0, r3
 8001924:	2303      	movs	r3, #3
 8001926:	4003      	ands	r3, r0
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	481f      	ldr	r0, [pc, #124]	; (80019ac <__NVIC_SetPriority+0xd4>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b25b      	sxtb	r3, r3
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	430a      	orrs	r2, r1
 8001938:	33c0      	adds	r3, #192	; 0xc0
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800193e:	e031      	b.n	80019a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <__NVIC_SetPriority+0xd8>)
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	0019      	movs	r1, r3
 8001948:	230f      	movs	r3, #15
 800194a:	400b      	ands	r3, r1
 800194c:	3b08      	subs	r3, #8
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3306      	adds	r3, #6
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1dfa      	adds	r2, r7, #7
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	0011      	movs	r1, r2
 8001960:	2203      	movs	r2, #3
 8001962:	400a      	ands	r2, r1
 8001964:	00d2      	lsls	r2, r2, #3
 8001966:	21ff      	movs	r1, #255	; 0xff
 8001968:	4091      	lsls	r1, r2
 800196a:	000a      	movs	r2, r1
 800196c:	43d2      	mvns	r2, r2
 800196e:	401a      	ands	r2, r3
 8001970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	401a      	ands	r2, r3
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	0018      	movs	r0, r3
 8001980:	2303      	movs	r3, #3
 8001982:	4003      	ands	r3, r0
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001988:	4809      	ldr	r0, [pc, #36]	; (80019b0 <__NVIC_SetPriority+0xd8>)
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	001c      	movs	r4, r3
 8001990:	230f      	movs	r3, #15
 8001992:	4023      	ands	r3, r4
 8001994:	3b08      	subs	r3, #8
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	430a      	orrs	r2, r1
 800199a:	3306      	adds	r3, #6
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	18c3      	adds	r3, r0, r3
 80019a0:	3304      	adds	r3, #4
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b003      	add	sp, #12
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	045b      	lsls	r3, r3, #17
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d301      	bcc.n	80019cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c8:	2301      	movs	r3, #1
 80019ca:	e010      	b.n	80019ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <SysTick_Config+0x44>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	3a01      	subs	r2, #1
 80019d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d4:	2301      	movs	r3, #1
 80019d6:	425b      	negs	r3, r3
 80019d8:	2103      	movs	r1, #3
 80019da:	0018      	movs	r0, r3
 80019dc:	f7ff ff7c 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x44>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x44>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	210f      	movs	r1, #15
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	1c02      	adds	r2, r0, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff ffbf 	bl	80019b4 <SysTick_Config>
 8001a36:	0003      	movs	r3, r0
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e149      	b.n	8001ce4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d100      	bne.n	8001a68 <HAL_GPIO_Init+0x28>
 8001a66:	e13a      	b.n	8001cde <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d00b      	beq.n	8001a88 <HAL_GPIO_Init+0x48>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b12      	cmp	r3, #18
 8001a86:	d130      	bne.n	8001aea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0xea>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d123      	bne.n	8001b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	58d3      	ldr	r3, [r2, r3]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2107      	movs	r1, #7
 8001b56:	400b      	ands	r3, r1
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	43da      	mvns	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	401a      	ands	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	055b      	lsls	r3, r3, #21
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d100      	bne.n	8001bb4 <HAL_GPIO_Init+0x174>
 8001bb2:	e094      	b.n	8001cde <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	589b      	ldr	r3, [r3, r2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4013      	ands	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	43da      	mvns	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	2390      	movs	r3, #144	; 0x90
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x1d6>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x1d2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x1ce>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x1d8>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x1d8>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x1d8>
 8001c16:	2300      	movs	r3, #0
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c36:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	035b      	lsls	r3, r3, #13
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	039b      	lsls	r3, r3, #14
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	1e13      	subs	r3, r2, #0
 8001cee:	d000      	beq.n	8001cf2 <HAL_GPIO_Init+0x2b2>
 8001cf0:	e6ae      	b.n	8001a50 <HAL_GPIO_Init+0x10>
  } 
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	0008      	movs	r0, r1
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	1cbb      	adds	r3, r7, #2
 8001d1e:	1c02      	adds	r2, r0, #0
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	1c7b      	adds	r3, r7, #1
 8001d24:	1c0a      	adds	r2, r1, #0
 8001d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d28:	1c7b      	adds	r3, r7, #1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d30:	1cbb      	adds	r3, r7, #2
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	1cbb      	adds	r3, r7, #2
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e082      	b.n	8001e64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d107      	bne.n	8001d7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	2100      	movs	r1, #0
 8001d70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fbf5 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2241      	movs	r2, #65	; 0x41
 8001d7e:	2124      	movs	r1, #36	; 0x24
 8001d80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	438a      	bics	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_I2C_Init+0x120>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4931      	ldr	r1, [pc, #196]	; (8001e70 <HAL_I2C_Init+0x124>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0209      	lsls	r1, r1, #8
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e007      	b.n	8001dda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2184      	movs	r1, #132	; 0x84
 8001dd4:	0209      	lsls	r1, r1, #8
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d104      	bne.n	8001dec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	491f      	ldr	r1, [pc, #124]	; (8001e74 <HAL_I2C_Init+0x128>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	491a      	ldr	r1, [pc, #104]	; (8001e70 <HAL_I2C_Init+0x124>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	0011      	movs	r1, r2
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	021a      	lsls	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69d9      	ldr	r1, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2241      	movs	r2, #65	; 0x41
 8001e50:	2120      	movs	r1, #32
 8001e52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2242      	movs	r2, #66	; 0x42
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	f0ffffff 	.word	0xf0ffffff
 8001e70:	ffff7fff 	.word	0xffff7fff
 8001e74:	02008000 	.word	0x02008000

08001e78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	0008      	movs	r0, r1
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	0019      	movs	r1, r3
 8001e86:	230a      	movs	r3, #10
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	1c02      	adds	r2, r0, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	2308      	movs	r3, #8
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	1c0a      	adds	r2, r1, #0
 8001e94:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2241      	movs	r2, #65	; 0x41
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d000      	beq.n	8001ea4 <HAL_I2C_Master_Transmit+0x2c>
 8001ea2:	e0e7      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Master_Transmit+0x3a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0e1      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eba:	f7ff fcdf 	bl	800187c <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	0219      	lsls	r1, r3, #8
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f000 fa04 	bl	80022dc <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cc      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2241      	movs	r2, #65	; 0x41
 8001ee0:	2121      	movs	r1, #33	; 0x21
 8001ee2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2242      	movs	r2, #66	; 0x42
 8001ee8:	2110      	movs	r1, #16
 8001eea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2208      	movs	r2, #8
 8001efc:	18ba      	adds	r2, r7, r2
 8001efe:	8812      	ldrh	r2, [r2, #0]
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d911      	bls.n	8001f36 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	22ff      	movs	r2, #255	; 0xff
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	045c      	lsls	r4, r3, #17
 8001f22:	230a      	movs	r3, #10
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	8819      	ldrh	r1, [r3, #0]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	4b55      	ldr	r3, [pc, #340]	; (8002080 <HAL_I2C_Master_Transmit+0x208>)
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	0023      	movs	r3, r4
 8001f30:	f000 fb60 	bl	80025f4 <I2C_TransferConfig>
 8001f34:	e075      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	049c      	lsls	r4, r3, #18
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	8819      	ldrh	r1, [r3, #0]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_I2C_Master_Transmit+0x208>)
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	0023      	movs	r3, r4
 8001f58:	f000 fb4c 	bl	80025f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f5c:	e061      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f9f8 	bl	800235a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e081      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03a      	beq.n	8002022 <HAL_I2C_Master_Transmit+0x1aa>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d136      	bne.n	8002022 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	f000 f98b 	bl	80022dc <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e053      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2bff      	cmp	r3, #255	; 0xff
 8001fd6:	d911      	bls.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	045c      	lsls	r4, r3, #17
 8001fe8:	230a      	movs	r3, #10
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	8819      	ldrh	r1, [r3, #0]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	0023      	movs	r3, r4
 8001ff6:	f000 fafd 	bl	80025f4 <I2C_TransferConfig>
 8001ffa:	e012      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	049c      	lsls	r4, r3, #18
 8002010:	230a      	movs	r3, #10
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	8819      	ldrh	r1, [r3, #0]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	0023      	movs	r3, r4
 800201e:	f000 fae9 	bl	80025f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d198      	bne.n	8001f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 f9d0 	bl	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e01a      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2220      	movs	r2, #32
 8002046:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	490c      	ldr	r1, [pc, #48]	; (8002084 <HAL_I2C_Master_Transmit+0x20c>)
 8002054:	400a      	ands	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2241      	movs	r2, #65	; 0x41
 800205c:	2120      	movs	r1, #32
 800205e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2242      	movs	r2, #66	; 0x42
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e000      	b.n	8002076 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002074:	2302      	movs	r3, #2
  }
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b007      	add	sp, #28
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	80002000 	.word	0x80002000
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	0008      	movs	r0, r1
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	0019      	movs	r1, r3
 8002096:	230a      	movs	r3, #10
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	1c02      	adds	r2, r0, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	2308      	movs	r3, #8
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	1c0a      	adds	r2, r1, #0
 80020a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d000      	beq.n	80020b4 <HAL_I2C_Master_Receive+0x2c>
 80020b2:	e0e8      	b.n	8002286 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2240      	movs	r2, #64	; 0x40
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Master_Receive+0x3a>
 80020be:	2302      	movs	r3, #2
 80020c0:	e0e2      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ca:	f7ff fbd7 	bl	800187c <HAL_GetTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	0219      	lsls	r1, r3, #8
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2319      	movs	r3, #25
 80020de:	2201      	movs	r2, #1
 80020e0:	f000 f8fc 	bl	80022dc <I2C_WaitOnFlagUntilTimeout>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0cd      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2241      	movs	r2, #65	; 0x41
 80020f0:	2122      	movs	r1, #34	; 0x22
 80020f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2242      	movs	r2, #66	; 0x42
 80020f8:	2110      	movs	r1, #16
 80020fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2208      	movs	r2, #8
 800210c:	18ba      	adds	r2, r7, r2
 800210e:	8812      	ldrh	r2, [r2, #0]
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d911      	bls.n	8002146 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	b2da      	uxtb	r2, r3
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	045c      	lsls	r4, r3, #17
 8002132:	230a      	movs	r3, #10
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	8819      	ldrh	r1, [r3, #0]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_I2C_Master_Receive+0x208>)
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	0023      	movs	r3, r4
 8002140:	f000 fa58 	bl	80025f4 <I2C_TransferConfig>
 8002144:	e076      	b.n	8002234 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	b2da      	uxtb	r2, r3
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	049c      	lsls	r4, r3, #18
 800215a:	230a      	movs	r3, #10
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	8819      	ldrh	r1, [r3, #0]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_I2C_Master_Receive+0x208>)
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	0023      	movs	r3, r4
 8002168:	f000 fa44 	bl	80025f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800216c:	e062      	b.n	8002234 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f96b 	bl	8002450 <I2C_WaitOnRXNEFlagUntilTimeout>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e082      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03a      	beq.n	8002234 <HAL_I2C_Master_Receive+0x1ac>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d136      	bne.n	8002234 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	0013      	movs	r3, r2
 80021d0:	2200      	movs	r2, #0
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	f000 f882 	bl	80022dc <I2C_WaitOnFlagUntilTimeout>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e053      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2bff      	cmp	r3, #255	; 0xff
 80021e8:	d911      	bls.n	800220e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	045c      	lsls	r4, r3, #17
 80021fa:	230a      	movs	r3, #10
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	8819      	ldrh	r1, [r3, #0]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	0023      	movs	r3, r4
 8002208:	f000 f9f4 	bl	80025f4 <I2C_TransferConfig>
 800220c:	e012      	b.n	8002234 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	b2da      	uxtb	r2, r3
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	049c      	lsls	r4, r3, #18
 8002222:	230a      	movs	r3, #10
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	8819      	ldrh	r1, [r3, #0]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	2300      	movs	r3, #0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	0023      	movs	r3, r4
 8002230:	f000 f9e0 	bl	80025f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d197      	bne.n	800216e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f8c7 	bl	80023d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e01a      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2220      	movs	r2, #32
 8002258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	490b      	ldr	r1, [pc, #44]	; (8002294 <HAL_I2C_Master_Receive+0x20c>)
 8002266:	400a      	ands	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2241      	movs	r2, #65	; 0x41
 800226e:	2120      	movs	r1, #32
 8002270:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2242      	movs	r2, #66	; 0x42
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b007      	add	sp, #28
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	80002400 	.word	0x80002400
 8002294:	fe00e800 	.word	0xfe00e800

08002298 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d103      	bne.n	80022b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d007      	beq.n	80022d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2101      	movs	r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]
  }
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ec:	e021      	b.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	d01e      	beq.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f4:	f7ff fac2 	bl	800187c <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d302      	bcc.n	800230a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	2220      	movs	r2, #32
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2120      	movs	r1, #32
 800231c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2242      	movs	r2, #66	; 0x42
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4013      	ands	r3, r2
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	425a      	negs	r2, r3
 8002342:	4153      	adcs	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	001a      	movs	r2, r3
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d0ce      	beq.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002366:	e02b      	b.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f8da 	bl	8002528 <I2C_IsAcknowledgeFailed>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e029      	b.n	80023d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3301      	adds	r3, #1
 8002380:	d01e      	beq.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002382:	f7ff fa7b 	bl	800187c <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	d302      	bcc.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d113      	bne.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2220      	movs	r2, #32
 800239e:	431a      	orrs	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2241      	movs	r2, #65	; 0x41
 80023a8:	2120      	movs	r1, #32
 80023aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2242      	movs	r2, #66	; 0x42
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d1cc      	bne.n	8002368 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e4:	e028      	b.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f89b 	bl	8002528 <I2C_IsAcknowledgeFailed>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d001      	beq.n	80023fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e026      	b.n	8002448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fa:	f7ff fa3f 	bl	800187c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	d302      	bcc.n	8002410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d113      	bne.n	8002438 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	2220      	movs	r2, #32
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2241      	movs	r2, #65	; 0x41
 8002420:	2120      	movs	r1, #32
 8002422:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2242      	movs	r2, #66	; 0x42
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	2100      	movs	r1, #0
 8002432:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e007      	b.n	8002448 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	2b20      	cmp	r3, #32
 8002444:	d1cf      	bne.n	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800245c:	e055      	b.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f85f 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d001      	beq.n	8002472 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e053      	b.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2220      	movs	r2, #32
 800247a:	4013      	ands	r3, r2
 800247c:	2b20      	cmp	r3, #32
 800247e:	d129      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
 800248a:	2b04      	cmp	r3, #4
 800248c:	d105      	bne.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e03f      	b.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2220      	movs	r2, #32
 80024a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	491d      	ldr	r1, [pc, #116]	; (8002524 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2241      	movs	r2, #65	; 0x41
 80024bc:	2120      	movs	r1, #32
 80024be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2242      	movs	r2, #66	; 0x42
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e022      	b.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7ff f9d2 	bl	800187c <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	2220      	movs	r2, #32
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2241      	movs	r2, #65	; 0x41
 80024fa:	2120      	movs	r1, #32
 80024fc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2204      	movs	r2, #4
 8002512:	4013      	ands	r3, r2
 8002514:	2b04      	cmp	r3, #4
 8002516:	d1a2      	bne.n	800245e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	fe00e800 	.word	0xfe00e800

08002528 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2210      	movs	r2, #16
 800253c:	4013      	ands	r3, r2
 800253e:	2b10      	cmp	r3, #16
 8002540:	d151      	bne.n	80025e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002542:	e021      	b.n	8002588 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	d01e      	beq.n	8002588 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff f997 	bl	800187c <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_IsAcknowledgeFailed+0x38>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d113      	bne.n	8002588 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	2220      	movs	r2, #32
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2241      	movs	r2, #65	; 0x41
 8002570:	2120      	movs	r1, #32
 8002572:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2242      	movs	r2, #66	; 0x42
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	2100      	movs	r1, #0
 8002582:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e02f      	b.n	80025e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2220      	movs	r2, #32
 8002590:	4013      	ands	r3, r2
 8002592:	2b20      	cmp	r3, #32
 8002594:	d1d6      	bne.n	8002544 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2210      	movs	r2, #16
 800259c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff fe75 	bl	8002298 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	490d      	ldr	r1, [pc, #52]	; (80025f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	2204      	movs	r2, #4
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2241      	movs	r2, #65	; 0x41
 80025ce:	2120      	movs	r1, #32
 80025d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2242      	movs	r2, #66	; 0x42
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	fe00e800 	.word	0xfe00e800

080025f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	0008      	movs	r0, r1
 80025fe:	0011      	movs	r1, r2
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	240a      	movs	r4, #10
 8002604:	193b      	adds	r3, r7, r4
 8002606:	1c02      	adds	r2, r0, #0
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	2009      	movs	r0, #9
 800260c:	183b      	adds	r3, r7, r0
 800260e:	1c0a      	adds	r2, r1, #0
 8002610:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	0d51      	lsrs	r1, r2, #21
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	00d2      	lsls	r2, r2, #3
 8002620:	400a      	ands	r2, r1
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <I2C_TransferConfig+0x68>)
 8002624:	430a      	orrs	r2, r1
 8002626:	43d2      	mvns	r2, r2
 8002628:	401a      	ands	r2, r3
 800262a:	0011      	movs	r1, r2
 800262c:	193b      	adds	r3, r7, r4
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	059b      	lsls	r3, r3, #22
 8002632:	0d9a      	lsrs	r2, r3, #22
 8002634:	183b      	adds	r3, r7, r0
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	0418      	lsls	r0, r3, #16
 800263a:	23ff      	movs	r3, #255	; 0xff
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	4003      	ands	r3, r0
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	431a      	orrs	r2, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b005      	add	sp, #20
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	03ff63ff 	.word	0x03ff63ff

08002660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2241      	movs	r2, #65	; 0x41
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	d138      	bne.n	80026e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2240      	movs	r2, #64	; 0x40
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002680:	2302      	movs	r3, #2
 8002682:	e032      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2241      	movs	r2, #65	; 0x41
 8002690:	2124      	movs	r1, #36	; 0x24
 8002692:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2101      	movs	r1, #1
 80026a0:	438a      	bics	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4911      	ldr	r1, [pc, #68]	; (80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2241      	movs	r2, #65	; 0x41
 80026d8:	2120      	movs	r1, #32
 80026da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	ffffefff 	.word	0xffffefff

080026f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2241      	movs	r2, #65	; 0x41
 8002706:	5c9b      	ldrb	r3, [r3, r2]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	d139      	bne.n	8002782 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002718:	2302      	movs	r3, #2
 800271a:	e033      	b.n	8002784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2241      	movs	r2, #65	; 0x41
 8002728:	2124      	movs	r1, #36	; 0x24
 800272a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2101      	movs	r1, #1
 8002738:	438a      	bics	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	2120      	movs	r1, #32
 8002774:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2240      	movs	r2, #64	; 0x40
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	fffff0ff 	.word	0xfffff0ff

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f000 fb76 	bl	8002e90 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	d100      	bne.n	80027b0 <HAL_RCC_OscConfig+0x20>
 80027ae:	e08e      	b.n	80028ce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027b0:	4bc5      	ldr	r3, [pc, #788]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	220c      	movs	r2, #12
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00e      	beq.n	80027da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027bc:	4bc2      	ldr	r3, [pc, #776]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	220c      	movs	r2, #12
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d117      	bne.n	80027f8 <HAL_RCC_OscConfig+0x68>
 80027c8:	4bbf      	ldr	r3, [pc, #764]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	23c0      	movs	r3, #192	; 0xc0
 80027ce:	025b      	lsls	r3, r3, #9
 80027d0:	401a      	ands	r2, r3
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d10e      	bne.n	80027f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4bbb      	ldr	r3, [pc, #748]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d100      	bne.n	80027e8 <HAL_RCC_OscConfig+0x58>
 80027e6:	e071      	b.n	80028cc <HAL_RCC_OscConfig+0x13c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d000      	beq.n	80027f2 <HAL_RCC_OscConfig+0x62>
 80027f0:	e06c      	b.n	80028cc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f000 fb4c 	bl	8002e90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x80>
 8002800:	4bb1      	ldr	r3, [pc, #708]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4bb0      	ldr	r3, [pc, #704]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0249      	lsls	r1, r1, #9
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e02f      	b.n	8002870 <HAL_RCC_OscConfig+0xe0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0xa2>
 8002818:	4bab      	ldr	r3, [pc, #684]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4baa      	ldr	r3, [pc, #680]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800281e:	49ab      	ldr	r1, [pc, #684]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4ba8      	ldr	r3, [pc, #672]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4ba7      	ldr	r3, [pc, #668]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800282a:	49a9      	ldr	r1, [pc, #676]	; (8002ad0 <HAL_RCC_OscConfig+0x340>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e01e      	b.n	8002870 <HAL_RCC_OscConfig+0xe0>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10e      	bne.n	8002858 <HAL_RCC_OscConfig+0xc8>
 800283a:	4ba3      	ldr	r3, [pc, #652]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4ba2      	ldr	r3, [pc, #648]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	02c9      	lsls	r1, r1, #11
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4b9f      	ldr	r3, [pc, #636]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b9e      	ldr	r3, [pc, #632]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0249      	lsls	r1, r1, #9
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xe0>
 8002858:	4b9b      	ldr	r3, [pc, #620]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b9a      	ldr	r3, [pc, #616]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800285e:	499b      	ldr	r1, [pc, #620]	; (8002acc <HAL_RCC_OscConfig+0x33c>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b98      	ldr	r3, [pc, #608]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b97      	ldr	r3, [pc, #604]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800286a:	4999      	ldr	r1, [pc, #612]	; (8002ad0 <HAL_RCC_OscConfig+0x340>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff f800 	bl	800187c <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe fffb 	bl	800187c <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e2fd      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0xf2>
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ffeb 	bl	800187c <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe ffe6 	bl	800187c <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e2e8      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x11c>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCC_OscConfig+0x14a>
 80028d8:	e06c      	b.n	80029b4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	220c      	movs	r2, #12
 80028e0:	4013      	ands	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e4:	4b78      	ldr	r3, [pc, #480]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	220c      	movs	r2, #12
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d11f      	bne.n	8002930 <HAL_RCC_OscConfig+0x1a0>
 80028f0:	4b75      	ldr	r3, [pc, #468]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	401a      	ands	r2, r3
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	429a      	cmp	r2, r3
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b71      	ldr	r3, [pc, #452]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x188>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e2bb      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b6b      	ldr	r3, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	22f8      	movs	r2, #248	; 0xf8
 800291e:	4393      	bics	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00da      	lsls	r2, r3, #3
 8002928:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e041      	b.n	80029b4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d024      	beq.n	8002982 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800293e:	2101      	movs	r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe ff9a 	bl	800187c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294e:	f7fe ff95 	bl	800187c <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e297      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d0f1      	beq.n	800294e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	22f8      	movs	r2, #248	; 0xf8
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00da      	lsls	r2, r3, #3
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e018      	b.n	80029b4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002988:	2101      	movs	r1, #1
 800298a:	438a      	bics	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe ff75 	bl	800187c <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe ff70 	bl	800187c <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e272      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d1f1      	bne.n	8002998 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe ff53 	bl	800187c <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe ff4e 	bl	800187c <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e250      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2202      	movs	r2, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d0f1      	beq.n	80029dc <HAL_RCC_OscConfig+0x24c>
 80029f8:	e018      	b.n	8002a2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	438a      	bics	r2, r1
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe ff39 	bl	800187c <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe ff34 	bl	800187c <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e236      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d1f1      	bne.n	8002a10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2204      	movs	r2, #4
 8002a32:	4013      	ands	r3, r2
 8002a34:	d100      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2a8>
 8002a36:	e0b5      	b.n	8002ba4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a38:	201f      	movs	r0, #31
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	055b      	lsls	r3, r3, #21
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d110      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	0549      	lsls	r1, r1, #21
 8002a56:	430a      	orrs	r2, r1
 8002a58:	61da      	str	r2, [r3, #28]
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	055b      	lsls	r3, r3, #21
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_OscConfig+0x344>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4013      	ands	r3, r2
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCC_OscConfig+0x344>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x344>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0049      	lsls	r1, r1, #1
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fef8 	bl	800187c <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fef3 	bl	800187c <HAL_GetTick>
 8002a96:	0002      	movs	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1f5      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x344>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4013      	ands	r3, r2
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x348>
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <HAL_RCC_OscConfig+0x338>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	621a      	str	r2, [r3, #32]
 8002ac4:	e036      	b.n	8002b34 <HAL_RCC_OscConfig+0x3a4>
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	fffeffff 	.word	0xfffeffff
 8002ad0:	fffbffff 	.word	0xfffbffff
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10c      	bne.n	8002afa <HAL_RCC_OscConfig+0x36a>
 8002ae0:	4bca      	ldr	r3, [pc, #808]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	4bc9      	ldr	r3, [pc, #804]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	438a      	bics	r2, r1
 8002aea:	621a      	str	r2, [r3, #32]
 8002aec:	4bc7      	ldr	r3, [pc, #796]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	4bc6      	ldr	r3, [pc, #792]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002af2:	2104      	movs	r1, #4
 8002af4:	438a      	bics	r2, r1
 8002af6:	621a      	str	r2, [r3, #32]
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x3a4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x38c>
 8002b02:	4bc2      	ldr	r3, [pc, #776]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	4bc1      	ldr	r3, [pc, #772]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b08:	2104      	movs	r1, #4
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	621a      	str	r2, [r3, #32]
 8002b0e:	4bbf      	ldr	r3, [pc, #764]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	4bbe      	ldr	r3, [pc, #760]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	621a      	str	r2, [r3, #32]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0x3a4>
 8002b1c:	4bbb      	ldr	r3, [pc, #748]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b1e:	6a1a      	ldr	r2, [r3, #32]
 8002b20:	4bba      	ldr	r3, [pc, #744]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	438a      	bics	r2, r1
 8002b26:	621a      	str	r2, [r3, #32]
 8002b28:	4bb8      	ldr	r3, [pc, #736]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	4bb7      	ldr	r3, [pc, #732]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b2e:	2104      	movs	r1, #4
 8002b30:	438a      	bics	r2, r1
 8002b32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d014      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fe9e 	bl	800187c <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e009      	b.n	8002b5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fe99 	bl	800187c <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	4aaf      	ldr	r2, [pc, #700]	; (8002e10 <HAL_RCC_OscConfig+0x680>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e19a      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	4bac      	ldr	r3, [pc, #688]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x3b6>
 8002b64:	e013      	b.n	8002b8e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fe89 	bl	800187c <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	e009      	b.n	8002b84 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fe84 	bl	800187c <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	4aa5      	ldr	r2, [pc, #660]	; (8002e10 <HAL_RCC_OscConfig+0x680>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e185      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	4ba1      	ldr	r3, [pc, #644]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b8e:	231f      	movs	r3, #31
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b98:	4b9c      	ldr	r3, [pc, #624]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	499d      	ldr	r1, [pc, #628]	; (8002e14 <HAL_RCC_OscConfig+0x684>)
 8002ba0:	400a      	ands	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	4013      	ands	r3, r2
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d12a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bb6:	4b95      	ldr	r3, [pc, #596]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bc2:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fe55 	bl	800187c <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd8:	f7fe fe50 	bl	800187c <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e152      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0f1      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bf4:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	22f8      	movs	r2, #248	; 0xf8
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	00da      	lsls	r2, r3, #3
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0a:	e034      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	3305      	adds	r3, #5
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c14:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c18:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c20:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	22f8      	movs	r2, #248	; 0xf8
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	00da      	lsls	r2, r3, #3
 8002c30:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
 8002c36:	e01e      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c38:	4b74      	ldr	r3, [pc, #464]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	2104      	movs	r1, #4
 8002c40:	430a      	orrs	r2, r1
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fe14 	bl	800187c <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c5a:	f7fe fe0f 	bl	800187c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e111      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c6c:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	2202      	movs	r2, #2
 8002c72:	4013      	ands	r3, r2
 8002c74:	d1f1      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d05c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c80:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	220c      	movs	r2, #12
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d00e      	beq.n	8002caa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c8c:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	220c      	movs	r2, #12
 8002c92:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d114      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	23c0      	movs	r3, #192	; 0xc0
 8002c9e:	025b      	lsls	r3, r3, #9
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002caa:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d040      	beq.n	8002d38 <HAL_RCC_OscConfig+0x5a8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d03c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e6      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cca:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cce:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0249      	lsls	r1, r1, #9
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fdd0 	bl	800187c <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce2:	f7fe fdcb 	bl	800187c <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0cd      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	025b      	lsls	r3, r3, #9
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x552>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d08:	4943      	ldr	r1, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x688>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fdb5 	bl	800187c <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d18:	f7fe fdb0 	bl	800187c <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0b2      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d2a:	4b38      	ldr	r3, [pc, #224]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	4013      	ands	r3, r2
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x588>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d38:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d100      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5b4>
 8002d42:	e0a4      	b.n	8002e8e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	220c      	movs	r2, #12
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d100      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5c2>
 8002d50:	e078      	b.n	8002e44 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d14c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d60:	492e      	ldr	r1, [pc, #184]	; (8002e1c <HAL_RCC_OscConfig+0x68c>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe fd89 	bl	800187c <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fd84 	bl	800187c <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e086      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	049b      	lsls	r3, r3, #18
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	220f      	movs	r2, #15
 8002d94:	4393      	bics	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_RCC_OscConfig+0x690>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	431a      	orrs	r2, r3
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	0449      	lsls	r1, r1, #17
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fd57 	bl	800187c <HAL_GetTick>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fd52 	bl	800187c <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e054      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	049b      	lsls	r3, r3, #18
 8002dee:	4013      	ands	r3, r2
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x644>
 8002df2:	e04c      	b.n	8002e8e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <HAL_RCC_OscConfig+0x68c>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fd3c 	bl	800187c <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x6a6>
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	00001388 	.word	0x00001388
 8002e14:	efffffff 	.word	0xefffffff
 8002e18:	fffeffff 	.word	0xfffeffff
 8002e1c:	feffffff 	.word	0xfeffffff
 8002e20:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fd2a 	bl	800187c <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e02c      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_RCC_OscConfig+0x708>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	049b      	lsls	r3, r3, #18
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x694>
 8002e42:	e024      	b.n	8002e8e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e01f      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCC_OscConfig+0x708>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x708>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	025b      	lsls	r3, r3, #9
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d10e      	bne.n	8002e8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	220f      	movs	r2, #15
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	23f0      	movs	r3, #240	; 0xf0
 8002e7e:	039b      	lsls	r3, r3, #14
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b008      	add	sp, #32
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0bf      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d911      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0a6      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d015      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d006      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ef6:	4b51      	ldr	r3, [pc, #324]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002efc:	21e0      	movs	r1, #224	; 0xe0
 8002efe:	00c9      	lsls	r1, r1, #3
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b4d      	ldr	r3, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	22f0      	movs	r2, #240	; 0xf0
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d04c      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d120      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e07a      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	049b      	lsls	r3, r3, #18
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d114      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06e      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	4013      	ands	r3, r2
 8002f64:	d108      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e062      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	4013      	ands	r3, r2
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e05b      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4393      	bics	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fc76 	bl	800187c <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f94:	e009      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f96:	f7fe fc71 	bl	800187c <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_RCC_ClockConfig+0x1a4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e042      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	220c      	movs	r2, #12
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1ec      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d211      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_RCC_ClockConfig+0x19c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e020      	b.n	8003030 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_RCC_ClockConfig+0x1a8>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800300c:	f000 f820 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003010:	0001      	movs	r1, r0
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	220f      	movs	r2, #15
 800301a:	4013      	ands	r3, r2
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1ac>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	000a      	movs	r2, r1
 8003022:	40da      	lsrs	r2, r3
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8003026:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fbe1 	bl	80017f0 <HAL_InitTick>
  
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40022000 	.word	0x40022000
 800303c:	40021000 	.word	0x40021000
 8003040:	00001388 	.word	0x00001388
 8003044:	fffff8ff 	.word	0xfffff8ff
 8003048:	08004734 	.word	0x08004734
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08f      	sub	sp, #60	; 0x3c
 8003054:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003056:	2314      	movs	r3, #20
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	4a38      	ldr	r2, [pc, #224]	; (800313c <HAL_RCC_GetSysClockFreq+0xec>)
 800305c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800305e:	c313      	stmia	r3!, {r0, r1, r4}
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4a36      	ldr	r2, [pc, #216]	; (8003140 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003068:	ca13      	ldmia	r2!, {r0, r1, r4}
 800306a:	c313      	stmia	r3!, {r0, r1, r4}
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003074:	2300      	movs	r3, #0
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003084:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	220c      	movs	r2, #12
 800308e:	4013      	ands	r3, r2
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d047      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xd4>
 8003094:	d849      	bhi.n	800312a <HAL_RCC_GetSysClockFreq+0xda>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x50>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x56>
 800309e:	e044      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030a4:	e044      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	220f      	movs	r2, #15
 80030ac:	4013      	ands	r3, r2
 80030ae:	2214      	movs	r2, #20
 80030b0:	18ba      	adds	r2, r7, r2
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	220f      	movs	r2, #15
 80030bc:	4013      	ands	r3, r2
 80030be:	1d3a      	adds	r2, r7, #4
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	025b      	lsls	r3, r3, #9
 80030ca:	401a      	ands	r2, r3
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	025b      	lsls	r3, r3, #9
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d109      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d6:	481c      	ldr	r0, [pc, #112]	; (8003148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d8:	f7fd f820 	bl	800011c <__udivsi3>
 80030dc:	0003      	movs	r3, r0
 80030de:	001a      	movs	r2, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	4353      	muls	r3, r2
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	e01a      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80030e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	025b      	lsls	r3, r3, #9
 80030ee:	401a      	ands	r2, r3
 80030f0:	23c0      	movs	r3, #192	; 0xc0
 80030f2:	025b      	lsls	r3, r3, #9
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d109      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fa:	4814      	ldr	r0, [pc, #80]	; (800314c <HAL_RCC_GetSysClockFreq+0xfc>)
 80030fc:	f7fd f80e 	bl	800011c <__udivsi3>
 8003100:	0003      	movs	r3, r0
 8003102:	001a      	movs	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	4353      	muls	r3, r2
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
 800310a:	e008      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800310c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310e:	480e      	ldr	r0, [pc, #56]	; (8003148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003110:	f7fd f804 	bl	800011c <__udivsi3>
 8003114:	0003      	movs	r3, r0
 8003116:	001a      	movs	r2, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	4353      	muls	r3, r2
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_RCC_GetSysClockFreq+0xf8>)
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800312e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b00f      	add	sp, #60	; 0x3c
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08004694 	.word	0x08004694
 8003140:	080046a4 	.word	0x080046a4
 8003144:	40021000 	.word	0x40021000
 8003148:	007a1200 	.word	0x007a1200
 800314c:	02dc6c00 	.word	0x02dc6c00

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <HAL_RCC_GetHCLKFreq+0x10>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	0018      	movs	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000000 	.word	0x20000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003168:	f7ff fff2 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 800316c:	0001      	movs	r1, r0
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	2207      	movs	r2, #7
 8003176:	4013      	ands	r3, r2
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_RCC_GetPCLK1Freq+0x28>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	40d9      	lsrs	r1, r3
 800317e:	000b      	movs	r3, r1
}    
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40021000 	.word	0x40021000
 800318c:	08004744 	.word	0x08004744

08003190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	025b      	lsls	r3, r3, #9
 80031a8:	4013      	ands	r3, r2
 80031aa:	d100      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031ac:	e08e      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2017      	movs	r0, #23
 80031b0:	183b      	adds	r3, r7, r0
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	055b      	lsls	r3, r3, #21
 80031be:	4013      	ands	r3, r2
 80031c0:	d110      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b64      	ldr	r3, [pc, #400]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	0549      	lsls	r1, r1, #21
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
 80031d0:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	055b      	lsls	r3, r3, #21
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d11a      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b58      	ldr	r3, [pc, #352]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80031f6:	2180      	movs	r1, #128	; 0x80
 80031f8:	0049      	lsls	r1, r1, #1
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fb3d 	bl	800187c <HAL_GetTick>
 8003202:	0003      	movs	r3, r0
 8003204:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7fe fb38 	bl	800187c <HAL_GetTick>
 800320c:	0002      	movs	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e097      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4013      	ands	r3, r2
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d034      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	23c0      	movs	r3, #192	; 0xc0
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4013      	ands	r3, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d02c      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a43      	ldr	r2, [pc, #268]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800324e:	4013      	ands	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	0249      	lsls	r1, r1, #9
 800325c:	430a      	orrs	r2, r1
 800325e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003266:	493e      	ldr	r1, [pc, #248]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	400a      	ands	r2, r1
 800326a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	4013      	ands	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe faff 	bl	800187c <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e009      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fafa 	bl	800187c <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	4a35      	ldr	r2, [pc, #212]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e058      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a2d      	ldr	r2, [pc, #180]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032b6:	2317      	movs	r3, #23
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032c6:	4928      	ldr	r1, [pc, #160]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	2203      	movs	r2, #3
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2220      	movs	r2, #32
 80032f0:	4013      	ands	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2210      	movs	r2, #16
 80032fa:	4393      	bics	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003304:	430a      	orrs	r2, r1
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	029b      	lsls	r3, r3, #10
 8003310:	4013      	ands	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	4393      	bics	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003324:	430a      	orrs	r2, r1
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4013      	ands	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	4393      	bics	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003344:	430a      	orrs	r2, r1
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b006      	add	sp, #24
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	fffffcff 	.word	0xfffffcff
 8003360:	fffeffff 	.word	0xfffeffff
 8003364:	00001388 	.word	0x00001388
 8003368:	efffffff 	.word	0xefffffff

0800336c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e044      	b.n	8003408 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2274      	movs	r2, #116	; 0x74
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f7fe f935 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2224      	movs	r2, #36	; 0x24
 800339a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f9ca 	bl	8003748 <UART_SetConfig>
 80033b4:	0003      	movs	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e024      	b.n	8003408 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fafd 	bl	80039c8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	490d      	ldr	r1, [pc, #52]	; (8003410 <HAL_UART_Init+0xa4>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	212a      	movs	r1, #42	; 0x2a
 80033ea:	438a      	bics	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fb95 	bl	8003b30 <UART_CheckIdleState>
 8003406:	0003      	movs	r3, r0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	ffffb7ff 	.word	0xffffb7ff

08003414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	2b20      	cmp	r3, #32
 800342a:	d000      	beq.n	800342e <HAL_UART_Transmit+0x1a>
 800342c:	e096      	b.n	800355c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_UART_Transmit+0x28>
 8003434:	1dbb      	adds	r3, r7, #6
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e08e      	b.n	800355e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	015b      	lsls	r3, r3, #5
 8003448:	429a      	cmp	r2, r3
 800344a:	d109      	bne.n	8003460 <HAL_UART_Transmit+0x4c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e07e      	b.n	800355e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2274      	movs	r2, #116	; 0x74
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_UART_Transmit+0x5a>
 800346a:	2302      	movs	r3, #2
 800346c:	e077      	b.n	800355e <HAL_UART_Transmit+0x14a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2274      	movs	r2, #116	; 0x74
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	2100      	movs	r1, #0
 800347c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003484:	f7fe f9fa 	bl	800187c <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1dba      	adds	r2, r7, #6
 8003490:	2150      	movs	r1, #80	; 0x50
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1dba      	adds	r2, r7, #6
 800349a:	2152      	movs	r1, #82	; 0x52
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d108      	bne.n	80034be <HAL_UART_Transmit+0xaa>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d104      	bne.n	80034be <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e003      	b.n	80034c6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2274      	movs	r2, #116	; 0x74
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80034ce:	e02d      	b.n	800352c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	0013      	movs	r3, r2
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	f000 fb6f 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e039      	b.n	800355e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	05d2      	lsls	r2, r2, #23
 80034fa:	0dd2      	lsrs	r2, r2, #23
 80034fc:	b292      	uxth	r2, r2
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	3302      	adds	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e008      	b.n	800351a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b292      	uxth	r2, r2
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3301      	adds	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2252      	movs	r2, #82	; 0x52
 800351e:	5a9b      	ldrh	r3, [r3, r2]
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b299      	uxth	r1, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2252      	movs	r2, #82	; 0x52
 800352a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2252      	movs	r2, #82	; 0x52
 8003530:	5a9b      	ldrh	r3, [r3, r2]
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1cb      	bne.n	80034d0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0013      	movs	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	f000 fb3b 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e005      	b.n	800355e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b008      	add	sp, #32
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	1dbb      	adds	r3, r7, #6
 8003576:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	2b20      	cmp	r3, #32
 800357e:	d000      	beq.n	8003582 <HAL_UART_Receive+0x1a>
 8003580:	e0da      	b.n	8003738 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_UART_Receive+0x28>
 8003588:	1dbb      	adds	r3, r7, #6
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0d2      	b.n	800373a <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	429a      	cmp	r2, r3
 800359e:	d109      	bne.n	80035b4 <HAL_UART_Receive+0x4c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4013      	ands	r3, r2
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0c2      	b.n	800373a <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2274      	movs	r2, #116	; 0x74
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Receive+0x5a>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0bb      	b.n	800373a <HAL_UART_Receive+0x1d2>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2274      	movs	r2, #116	; 0x74
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	2100      	movs	r1, #0
 80035d0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2222      	movs	r2, #34	; 0x22
 80035d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035de:	f7fe f94d 	bl	800187c <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1dba      	adds	r2, r7, #6
 80035ea:	2158      	movs	r1, #88	; 0x58
 80035ec:	8812      	ldrh	r2, [r2, #0]
 80035ee:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1dba      	adds	r2, r7, #6
 80035f4:	215a      	movs	r1, #90	; 0x5a
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	015b      	lsls	r3, r3, #5
 8003602:	429a      	cmp	r2, r3
 8003604:	d10d      	bne.n	8003622 <HAL_UART_Receive+0xba>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_UART_Receive+0xb0>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	225c      	movs	r2, #92	; 0x5c
 8003612:	494c      	ldr	r1, [pc, #304]	; (8003744 <HAL_UART_Receive+0x1dc>)
 8003614:	5299      	strh	r1, [r3, r2]
 8003616:	e02e      	b.n	8003676 <HAL_UART_Receive+0x10e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	225c      	movs	r2, #92	; 0x5c
 800361c:	21ff      	movs	r1, #255	; 0xff
 800361e:	5299      	strh	r1, [r3, r2]
 8003620:	e029      	b.n	8003676 <HAL_UART_Receive+0x10e>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_UART_Receive+0xde>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <HAL_UART_Receive+0xd4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	225c      	movs	r2, #92	; 0x5c
 8003636:	21ff      	movs	r1, #255	; 0xff
 8003638:	5299      	strh	r1, [r3, r2]
 800363a:	e01c      	b.n	8003676 <HAL_UART_Receive+0x10e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	225c      	movs	r2, #92	; 0x5c
 8003640:	217f      	movs	r1, #127	; 0x7f
 8003642:	5299      	strh	r1, [r3, r2]
 8003644:	e017      	b.n	8003676 <HAL_UART_Receive+0x10e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	055b      	lsls	r3, r3, #21
 800364e:	429a      	cmp	r2, r3
 8003650:	d10d      	bne.n	800366e <HAL_UART_Receive+0x106>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <HAL_UART_Receive+0xfc>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	225c      	movs	r2, #92	; 0x5c
 800365e:	217f      	movs	r1, #127	; 0x7f
 8003660:	5299      	strh	r1, [r3, r2]
 8003662:	e008      	b.n	8003676 <HAL_UART_Receive+0x10e>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	225c      	movs	r2, #92	; 0x5c
 8003668:	213f      	movs	r1, #63	; 0x3f
 800366a:	5299      	strh	r1, [r3, r2]
 800366c:	e003      	b.n	8003676 <HAL_UART_Receive+0x10e>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	225c      	movs	r2, #92	; 0x5c
 8003672:	2100      	movs	r1, #0
 8003674:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003676:	2312      	movs	r3, #18
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	215c      	movs	r1, #92	; 0x5c
 800367e:	5a52      	ldrh	r2, [r2, r1]
 8003680:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	015b      	lsls	r3, r3, #5
 800368a:	429a      	cmp	r2, r3
 800368c:	d108      	bne.n	80036a0 <HAL_UART_Receive+0x138>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e003      	b.n	80036a8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2274      	movs	r2, #116	; 0x74
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036b0:	e037      	b.n	8003722 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	0013      	movs	r3, r2
 80036bc:	2200      	movs	r2, #0
 80036be:	2120      	movs	r1, #32
 80036c0:	f000 fa7e 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d001      	beq.n	80036cc <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e036      	b.n	800373a <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10e      	bne.n	80036f0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2212      	movs	r2, #18
 80036dc:	18ba      	adds	r2, r7, r2
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	3302      	adds	r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e00f      	b.n	8003710 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2212      	movs	r2, #18
 80036fc:	18ba      	adds	r2, r7, r2
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	4013      	ands	r3, r2
 8003704:	b2da      	uxtb	r2, r3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3301      	adds	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	225a      	movs	r2, #90	; 0x5a
 8003714:	5a9b      	ldrh	r3, [r3, r2]
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b299      	uxth	r1, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	225a      	movs	r2, #90	; 0x5a
 8003720:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	225a      	movs	r2, #90	; 0x5a
 8003726:	5a9b      	ldrh	r3, [r3, r2]
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1c1      	bne.n	80036b2 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b008      	add	sp, #32
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	000001ff 	.word	0x000001ff

08003748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003750:	231e      	movs	r3, #30
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a8d      	ldr	r2, [pc, #564]	; (80039ac <UART_SetConfig+0x264>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a88      	ldr	r2, [pc, #544]	; (80039b0 <UART_SetConfig+0x268>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a7f      	ldr	r2, [pc, #508]	; (80039b4 <UART_SetConfig+0x26c>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7b      	ldr	r2, [pc, #492]	; (80039b8 <UART_SetConfig+0x270>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d127      	bne.n	800381e <UART_SetConfig+0xd6>
 80037ce:	4b7b      	ldr	r3, [pc, #492]	; (80039bc <UART_SetConfig+0x274>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2203      	movs	r2, #3
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d00d      	beq.n	80037f6 <UART_SetConfig+0xae>
 80037da:	d81b      	bhi.n	8003814 <UART_SetConfig+0xcc>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d014      	beq.n	800380a <UART_SetConfig+0xc2>
 80037e0:	d818      	bhi.n	8003814 <UART_SetConfig+0xcc>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <UART_SetConfig+0xa4>
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d00a      	beq.n	8003800 <UART_SetConfig+0xb8>
 80037ea:	e013      	b.n	8003814 <UART_SetConfig+0xcc>
 80037ec:	231f      	movs	r3, #31
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e021      	b.n	800383a <UART_SetConfig+0xf2>
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e01c      	b.n	800383a <UART_SetConfig+0xf2>
 8003800:	231f      	movs	r3, #31
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2204      	movs	r2, #4
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e017      	b.n	800383a <UART_SetConfig+0xf2>
 800380a:	231f      	movs	r3, #31
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2208      	movs	r2, #8
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e012      	b.n	800383a <UART_SetConfig+0xf2>
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2210      	movs	r2, #16
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e00d      	b.n	800383a <UART_SetConfig+0xf2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a67      	ldr	r2, [pc, #412]	; (80039c0 <UART_SetConfig+0x278>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d104      	bne.n	8003832 <UART_SetConfig+0xea>
 8003828:	231f      	movs	r3, #31
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e003      	b.n	800383a <UART_SetConfig+0xf2>
 8003832:	231f      	movs	r3, #31
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2210      	movs	r2, #16
 8003838:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	429a      	cmp	r2, r3
 8003844:	d15d      	bne.n	8003902 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003846:	231f      	movs	r3, #31
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d015      	beq.n	800387c <UART_SetConfig+0x134>
 8003850:	dc18      	bgt.n	8003884 <UART_SetConfig+0x13c>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d00d      	beq.n	8003872 <UART_SetConfig+0x12a>
 8003856:	dc15      	bgt.n	8003884 <UART_SetConfig+0x13c>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <UART_SetConfig+0x11a>
 800385c:	2b02      	cmp	r3, #2
 800385e:	d005      	beq.n	800386c <UART_SetConfig+0x124>
 8003860:	e010      	b.n	8003884 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003862:	f7ff fc7f 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8003866:	0003      	movs	r3, r0
 8003868:	61bb      	str	r3, [r7, #24]
        break;
 800386a:	e012      	b.n	8003892 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <UART_SetConfig+0x27c>)
 800386e:	61bb      	str	r3, [r7, #24]
        break;
 8003870:	e00f      	b.n	8003892 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7ff fbed 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003876:	0003      	movs	r3, r0
 8003878:	61bb      	str	r3, [r7, #24]
        break;
 800387a:	e00a      	b.n	8003892 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	61bb      	str	r3, [r7, #24]
        break;
 8003882:	e006      	b.n	8003892 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003888:	231e      	movs	r3, #30
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
        break;
 8003890:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d100      	bne.n	800389a <UART_SetConfig+0x152>
 8003898:	e07b      	b.n	8003992 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	005a      	lsls	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	18d2      	adds	r2, r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f7fc fc35 	bl	800011c <__udivsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d91c      	bls.n	80038f8 <UART_SetConfig+0x1b0>
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	025b      	lsls	r3, r3, #9
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d217      	bcs.n	80038f8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	200e      	movs	r0, #14
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	210f      	movs	r1, #15
 80038d2:	438a      	bics	r2, r1
 80038d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2207      	movs	r2, #7
 80038de:	4013      	ands	r3, r2
 80038e0:	b299      	uxth	r1, r3
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	183a      	adds	r2, r7, r0
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	183a      	adds	r2, r7, r0
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e04c      	b.n	8003992 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	231e      	movs	r3, #30
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	e047      	b.n	8003992 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003902:	231f      	movs	r3, #31
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d015      	beq.n	8003938 <UART_SetConfig+0x1f0>
 800390c:	dc18      	bgt.n	8003940 <UART_SetConfig+0x1f8>
 800390e:	2b04      	cmp	r3, #4
 8003910:	d00d      	beq.n	800392e <UART_SetConfig+0x1e6>
 8003912:	dc15      	bgt.n	8003940 <UART_SetConfig+0x1f8>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <UART_SetConfig+0x1d6>
 8003918:	2b02      	cmp	r3, #2
 800391a:	d005      	beq.n	8003928 <UART_SetConfig+0x1e0>
 800391c:	e010      	b.n	8003940 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391e:	f7ff fc21 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8003922:	0003      	movs	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]
        break;
 8003926:	e012      	b.n	800394e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <UART_SetConfig+0x27c>)
 800392a:	61bb      	str	r3, [r7, #24]
        break;
 800392c:	e00f      	b.n	800394e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392e:	f7ff fb8f 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003932:	0003      	movs	r3, r0
 8003934:	61bb      	str	r3, [r7, #24]
        break;
 8003936:	e00a      	b.n	800394e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	61bb      	str	r3, [r7, #24]
        break;
 800393e:	e006      	b.n	800394e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003944:	231e      	movs	r3, #30
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
        break;
 800394c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01e      	beq.n	8003992 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	085a      	lsrs	r2, r3, #1
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	18d2      	adds	r2, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0019      	movs	r1, r3
 8003964:	0010      	movs	r0, r2
 8003966:	f7fc fbd9 	bl	800011c <__udivsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	b29b      	uxth	r3, r3
 800396e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	d909      	bls.n	800398a <UART_SetConfig+0x242>
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	025b      	lsls	r3, r3, #9
 800397c:	429a      	cmp	r2, r3
 800397e:	d204      	bcs.n	800398a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	e003      	b.n	8003992 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800398a:	231e      	movs	r3, #30
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800399e:	231e      	movs	r3, #30
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	781b      	ldrb	r3, [r3, #0]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b008      	add	sp, #32
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	efff69f3 	.word	0xefff69f3
 80039b0:	ffffcfff 	.word	0xffffcfff
 80039b4:	fffff4ff 	.word	0xfffff4ff
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	007a1200 	.word	0x007a1200

080039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2201      	movs	r2, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <UART_AdvFeatureConfig+0x144>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a43      	ldr	r2, [pc, #268]	; (8003b10 <UART_AdvFeatureConfig+0x148>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	2204      	movs	r2, #4
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <UART_AdvFeatureConfig+0x14c>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <UART_AdvFeatureConfig+0x150>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d00b      	beq.n	8003a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <UART_AdvFeatureConfig+0x154>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <UART_AdvFeatureConfig+0x158>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <UART_AdvFeatureConfig+0x15c>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	035b      	lsls	r3, r3, #13
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10b      	bne.n	8003ae2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <UART_AdvFeatureConfig+0x160>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <UART_AdvFeatureConfig+0x164>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	fffdffff 	.word	0xfffdffff
 8003b10:	fffeffff 	.word	0xfffeffff
 8003b14:	fffbffff 	.word	0xfffbffff
 8003b18:	ffff7fff 	.word	0xffff7fff
 8003b1c:	ffffefff 	.word	0xffffefff
 8003b20:	ffffdfff 	.word	0xffffdfff
 8003b24:	ffefffff 	.word	0xffefffff
 8003b28:	ff9fffff 	.word	0xff9fffff
 8003b2c:	fff7ffff 	.word	0xfff7ffff

08003b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b40:	f7fd fe9c 	bl	800187c <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2208      	movs	r2, #8
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d10c      	bne.n	8003b70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0391      	lsls	r1, r2, #14
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <UART_CheckIdleState+0x8c>)
 8003b60:	9200      	str	r2, [sp, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f000 f82c 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b68:	1e03      	subs	r3, r0, #0
 8003b6a:	d001      	beq.n	8003b70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e021      	b.n	8003bb4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2204      	movs	r2, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d10c      	bne.n	8003b98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	03d1      	lsls	r1, r2, #15
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <UART_CheckIdleState+0x8c>)
 8003b88:	9200      	str	r2, [sp, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f000 f818 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d001      	beq.n	8003b98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e00d      	b.n	8003bb4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2274      	movs	r2, #116	; 0x74
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	01ffffff 	.word	0x01ffffff

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e05e      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	d05b      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fd fe50 	bl	800187c <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <UART_WaitOnFlagUntilTimeout+0x2e>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11b      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	492f      	ldr	r1, [pc, #188]	; (8003cb8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2274      	movs	r2, #116	; 0x74
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e044      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d02e      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d124      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2280      	movs	r2, #128	; 0x80
 8003c80:	2120      	movs	r1, #32
 8003c82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2274      	movs	r2, #116	; 0x74
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e00f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	425a      	negs	r2, r3
 8003ca0:	4153      	adcs	r3, r2
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d091      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffffe5f 	.word	0xfffffe5f

08003cbc <__errno>:
 8003cbc:	4b01      	ldr	r3, [pc, #4]	; (8003cc4 <__errno+0x8>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	4770      	bx	lr
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	2600      	movs	r6, #0
 8003ccc:	4d0c      	ldr	r5, [pc, #48]	; (8003d00 <__libc_init_array+0x38>)
 8003cce:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cd0:	1b64      	subs	r4, r4, r5
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	2600      	movs	r6, #0
 8003cda:	f000 fc47 	bl	800456c <_init>
 8003cde:	4d0a      	ldr	r5, [pc, #40]	; (8003d08 <__libc_init_array+0x40>)
 8003ce0:	4c0a      	ldr	r4, [pc, #40]	; (8003d0c <__libc_init_array+0x44>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	00b3      	lsls	r3, r6, #2
 8003cee:	58eb      	ldr	r3, [r5, r3]
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	00b3      	lsls	r3, r6, #2
 8003cf8:	58eb      	ldr	r3, [r5, r3]
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08004780 	.word	0x08004780
 8003d04:	08004780 	.word	0x08004780
 8003d08:	08004780 	.word	0x08004780
 8003d0c:	08004784 	.word	0x08004784

08003d10 <memcpy>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b510      	push	{r4, lr}
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d100      	bne.n	8003d1a <memcpy+0xa>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	5ccc      	ldrb	r4, [r1, r3]
 8003d1c:	54c4      	strb	r4, [r0, r3]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	e7f8      	b.n	8003d14 <memcpy+0x4>

08003d22 <memset>:
 8003d22:	0003      	movs	r3, r0
 8003d24:	1882      	adds	r2, r0, r2
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d100      	bne.n	8003d2c <memset+0xa>
 8003d2a:	4770      	bx	lr
 8003d2c:	7019      	strb	r1, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	e7f9      	b.n	8003d26 <memset+0x4>
	...

08003d34 <siprintf>:
 8003d34:	b40e      	push	{r1, r2, r3}
 8003d36:	b500      	push	{lr}
 8003d38:	490b      	ldr	r1, [pc, #44]	; (8003d68 <siprintf+0x34>)
 8003d3a:	b09c      	sub	sp, #112	; 0x70
 8003d3c:	ab1d      	add	r3, sp, #116	; 0x74
 8003d3e:	9002      	str	r0, [sp, #8]
 8003d40:	9006      	str	r0, [sp, #24]
 8003d42:	9107      	str	r1, [sp, #28]
 8003d44:	9104      	str	r1, [sp, #16]
 8003d46:	4809      	ldr	r0, [pc, #36]	; (8003d6c <siprintf+0x38>)
 8003d48:	4909      	ldr	r1, [pc, #36]	; (8003d70 <siprintf+0x3c>)
 8003d4a:	cb04      	ldmia	r3!, {r2}
 8003d4c:	9105      	str	r1, [sp, #20]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	a902      	add	r1, sp, #8
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	f000 f870 	bl	8003e38 <_svfiprintf_r>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9a02      	ldr	r2, [sp, #8]
 8003d5c:	7013      	strb	r3, [r2, #0]
 8003d5e:	b01c      	add	sp, #112	; 0x70
 8003d60:	bc08      	pop	{r3}
 8003d62:	b003      	add	sp, #12
 8003d64:	4718      	bx	r3
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	7fffffff 	.word	0x7fffffff
 8003d6c:	2000000c 	.word	0x2000000c
 8003d70:	ffff0208 	.word	0xffff0208

08003d74 <__ssputs_r>:
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	688e      	ldr	r6, [r1, #8]
 8003d78:	b085      	sub	sp, #20
 8003d7a:	0007      	movs	r7, r0
 8003d7c:	000c      	movs	r4, r1
 8003d7e:	9203      	str	r2, [sp, #12]
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	429e      	cmp	r6, r3
 8003d84:	d83c      	bhi.n	8003e00 <__ssputs_r+0x8c>
 8003d86:	2390      	movs	r3, #144	; 0x90
 8003d88:	898a      	ldrh	r2, [r1, #12]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	421a      	tst	r2, r3
 8003d8e:	d034      	beq.n	8003dfa <__ssputs_r+0x86>
 8003d90:	2503      	movs	r5, #3
 8003d92:	6909      	ldr	r1, [r1, #16]
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	1a5b      	subs	r3, r3, r1
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	6963      	ldr	r3, [r4, #20]
 8003d9c:	9802      	ldr	r0, [sp, #8]
 8003d9e:	435d      	muls	r5, r3
 8003da0:	0feb      	lsrs	r3, r5, #31
 8003da2:	195d      	adds	r5, r3, r5
 8003da4:	9b01      	ldr	r3, [sp, #4]
 8003da6:	106d      	asrs	r5, r5, #1
 8003da8:	3301      	adds	r3, #1
 8003daa:	181b      	adds	r3, r3, r0
 8003dac:	42ab      	cmp	r3, r5
 8003dae:	d900      	bls.n	8003db2 <__ssputs_r+0x3e>
 8003db0:	001d      	movs	r5, r3
 8003db2:	0553      	lsls	r3, r2, #21
 8003db4:	d532      	bpl.n	8003e1c <__ssputs_r+0xa8>
 8003db6:	0029      	movs	r1, r5
 8003db8:	0038      	movs	r0, r7
 8003dba:	f000 fb27 	bl	800440c <_malloc_r>
 8003dbe:	1e06      	subs	r6, r0, #0
 8003dc0:	d109      	bne.n	8003dd6 <__ssputs_r+0x62>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	2001      	movs	r0, #1
 8003dca:	89a2      	ldrh	r2, [r4, #12]
 8003dcc:	4240      	negs	r0, r0
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	81a3      	strh	r3, [r4, #12]
 8003dd2:	b005      	add	sp, #20
 8003dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd6:	9a02      	ldr	r2, [sp, #8]
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	f7ff ff99 	bl	8003d10 <memcpy>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <__ssputs_r+0xc0>)
 8003de2:	401a      	ands	r2, r3
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	4313      	orrs	r3, r2
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	9b02      	ldr	r3, [sp, #8]
 8003dec:	6126      	str	r6, [r4, #16]
 8003dee:	18f6      	adds	r6, r6, r3
 8003df0:	6026      	str	r6, [r4, #0]
 8003df2:	6165      	str	r5, [r4, #20]
 8003df4:	9e01      	ldr	r6, [sp, #4]
 8003df6:	1aed      	subs	r5, r5, r3
 8003df8:	60a5      	str	r5, [r4, #8]
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	429e      	cmp	r6, r3
 8003dfe:	d900      	bls.n	8003e02 <__ssputs_r+0x8e>
 8003e00:	9e01      	ldr	r6, [sp, #4]
 8003e02:	0032      	movs	r2, r6
 8003e04:	9903      	ldr	r1, [sp, #12]
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	f000 faa3 	bl	8004352 <memmove>
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	2000      	movs	r0, #0
 8003e10:	1b9b      	subs	r3, r3, r6
 8003e12:	60a3      	str	r3, [r4, #8]
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	199e      	adds	r6, r3, r6
 8003e18:	6026      	str	r6, [r4, #0]
 8003e1a:	e7da      	b.n	8003dd2 <__ssputs_r+0x5e>
 8003e1c:	002a      	movs	r2, r5
 8003e1e:	0038      	movs	r0, r7
 8003e20:	f000 fb52 	bl	80044c8 <_realloc_r>
 8003e24:	1e06      	subs	r6, r0, #0
 8003e26:	d1e0      	bne.n	8003dea <__ssputs_r+0x76>
 8003e28:	0038      	movs	r0, r7
 8003e2a:	6921      	ldr	r1, [r4, #16]
 8003e2c:	f000 faa4 	bl	8004378 <_free_r>
 8003e30:	e7c7      	b.n	8003dc2 <__ssputs_r+0x4e>
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	fffffb7f 	.word	0xfffffb7f

08003e38 <_svfiprintf_r>:
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	b0a1      	sub	sp, #132	; 0x84
 8003e3c:	9003      	str	r0, [sp, #12]
 8003e3e:	001d      	movs	r5, r3
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	000f      	movs	r7, r1
 8003e44:	0016      	movs	r6, r2
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	d511      	bpl.n	8003e6e <_svfiprintf_r+0x36>
 8003e4a:	690b      	ldr	r3, [r1, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10e      	bne.n	8003e6e <_svfiprintf_r+0x36>
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	f000 fadb 	bl	800440c <_malloc_r>
 8003e56:	6038      	str	r0, [r7, #0]
 8003e58:	6138      	str	r0, [r7, #16]
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d105      	bne.n	8003e6a <_svfiprintf_r+0x32>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	9a03      	ldr	r2, [sp, #12]
 8003e62:	3801      	subs	r0, #1
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	b021      	add	sp, #132	; 0x84
 8003e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	ac08      	add	r4, sp, #32
 8003e72:	6163      	str	r3, [r4, #20]
 8003e74:	3320      	adds	r3, #32
 8003e76:	7663      	strb	r3, [r4, #25]
 8003e78:	3310      	adds	r3, #16
 8003e7a:	76a3      	strb	r3, [r4, #26]
 8003e7c:	9507      	str	r5, [sp, #28]
 8003e7e:	0035      	movs	r5, r6
 8003e80:	782b      	ldrb	r3, [r5, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <_svfiprintf_r+0x52>
 8003e86:	2b25      	cmp	r3, #37	; 0x25
 8003e88:	d147      	bne.n	8003f1a <_svfiprintf_r+0xe2>
 8003e8a:	1bab      	subs	r3, r5, r6
 8003e8c:	9305      	str	r3, [sp, #20]
 8003e8e:	42b5      	cmp	r5, r6
 8003e90:	d00c      	beq.n	8003eac <_svfiprintf_r+0x74>
 8003e92:	0032      	movs	r2, r6
 8003e94:	0039      	movs	r1, r7
 8003e96:	9803      	ldr	r0, [sp, #12]
 8003e98:	f7ff ff6c 	bl	8003d74 <__ssputs_r>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	d100      	bne.n	8003ea2 <_svfiprintf_r+0x6a>
 8003ea0:	e0ae      	b.n	8004000 <_svfiprintf_r+0x1c8>
 8003ea2:	6962      	ldr	r2, [r4, #20]
 8003ea4:	9b05      	ldr	r3, [sp, #20]
 8003ea6:	4694      	mov	ip, r2
 8003ea8:	4463      	add	r3, ip
 8003eaa:	6163      	str	r3, [r4, #20]
 8003eac:	782b      	ldrb	r3, [r5, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d100      	bne.n	8003eb4 <_svfiprintf_r+0x7c>
 8003eb2:	e0a5      	b.n	8004000 <_svfiprintf_r+0x1c8>
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	4252      	negs	r2, r2
 8003eba:	6062      	str	r2, [r4, #4]
 8003ebc:	a904      	add	r1, sp, #16
 8003ebe:	3254      	adds	r2, #84	; 0x54
 8003ec0:	1852      	adds	r2, r2, r1
 8003ec2:	1c6e      	adds	r6, r5, #1
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	60e3      	str	r3, [r4, #12]
 8003ec8:	60a3      	str	r3, [r4, #8]
 8003eca:	7013      	strb	r3, [r2, #0]
 8003ecc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ece:	2205      	movs	r2, #5
 8003ed0:	7831      	ldrb	r1, [r6, #0]
 8003ed2:	4854      	ldr	r0, [pc, #336]	; (8004024 <_svfiprintf_r+0x1ec>)
 8003ed4:	f000 fa32 	bl	800433c <memchr>
 8003ed8:	1c75      	adds	r5, r6, #1
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d11f      	bne.n	8003f1e <_svfiprintf_r+0xe6>
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	06d3      	lsls	r3, r2, #27
 8003ee2:	d504      	bpl.n	8003eee <_svfiprintf_r+0xb6>
 8003ee4:	2353      	movs	r3, #83	; 0x53
 8003ee6:	a904      	add	r1, sp, #16
 8003ee8:	185b      	adds	r3, r3, r1
 8003eea:	2120      	movs	r1, #32
 8003eec:	7019      	strb	r1, [r3, #0]
 8003eee:	0713      	lsls	r3, r2, #28
 8003ef0:	d504      	bpl.n	8003efc <_svfiprintf_r+0xc4>
 8003ef2:	2353      	movs	r3, #83	; 0x53
 8003ef4:	a904      	add	r1, sp, #16
 8003ef6:	185b      	adds	r3, r3, r1
 8003ef8:	212b      	movs	r1, #43	; 0x2b
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	7833      	ldrb	r3, [r6, #0]
 8003efe:	2b2a      	cmp	r3, #42	; 0x2a
 8003f00:	d016      	beq.n	8003f30 <_svfiprintf_r+0xf8>
 8003f02:	0035      	movs	r5, r6
 8003f04:	2100      	movs	r1, #0
 8003f06:	200a      	movs	r0, #10
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	782a      	ldrb	r2, [r5, #0]
 8003f0c:	1c6e      	adds	r6, r5, #1
 8003f0e:	3a30      	subs	r2, #48	; 0x30
 8003f10:	2a09      	cmp	r2, #9
 8003f12:	d94e      	bls.n	8003fb2 <_svfiprintf_r+0x17a>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d111      	bne.n	8003f3c <_svfiprintf_r+0x104>
 8003f18:	e017      	b.n	8003f4a <_svfiprintf_r+0x112>
 8003f1a:	3501      	adds	r5, #1
 8003f1c:	e7b0      	b.n	8003e80 <_svfiprintf_r+0x48>
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <_svfiprintf_r+0x1ec>)
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	1ac0      	subs	r0, r0, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	4083      	lsls	r3, r0
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	002e      	movs	r6, r5
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	e7ce      	b.n	8003ece <_svfiprintf_r+0x96>
 8003f30:	9b07      	ldr	r3, [sp, #28]
 8003f32:	1d19      	adds	r1, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	9107      	str	r1, [sp, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	db01      	blt.n	8003f40 <_svfiprintf_r+0x108>
 8003f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f3e:	e004      	b.n	8003f4a <_svfiprintf_r+0x112>
 8003f40:	425b      	negs	r3, r3
 8003f42:	60e3      	str	r3, [r4, #12]
 8003f44:	2302      	movs	r3, #2
 8003f46:	4313      	orrs	r3, r2
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	782b      	ldrb	r3, [r5, #0]
 8003f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f4e:	d10a      	bne.n	8003f66 <_svfiprintf_r+0x12e>
 8003f50:	786b      	ldrb	r3, [r5, #1]
 8003f52:	2b2a      	cmp	r3, #42	; 0x2a
 8003f54:	d135      	bne.n	8003fc2 <_svfiprintf_r+0x18a>
 8003f56:	9b07      	ldr	r3, [sp, #28]
 8003f58:	3502      	adds	r5, #2
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	9207      	str	r2, [sp, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	db2b      	blt.n	8003fbc <_svfiprintf_r+0x184>
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	4e30      	ldr	r6, [pc, #192]	; (8004028 <_svfiprintf_r+0x1f0>)
 8003f68:	2203      	movs	r2, #3
 8003f6a:	0030      	movs	r0, r6
 8003f6c:	7829      	ldrb	r1, [r5, #0]
 8003f6e:	f000 f9e5 	bl	800433c <memchr>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d006      	beq.n	8003f84 <_svfiprintf_r+0x14c>
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	1b80      	subs	r0, r0, r6
 8003f7a:	4083      	lsls	r3, r0
 8003f7c:	6822      	ldr	r2, [r4, #0]
 8003f7e:	3501      	adds	r5, #1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	7829      	ldrb	r1, [r5, #0]
 8003f86:	2206      	movs	r2, #6
 8003f88:	4828      	ldr	r0, [pc, #160]	; (800402c <_svfiprintf_r+0x1f4>)
 8003f8a:	1c6e      	adds	r6, r5, #1
 8003f8c:	7621      	strb	r1, [r4, #24]
 8003f8e:	f000 f9d5 	bl	800433c <memchr>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d03c      	beq.n	8004010 <_svfiprintf_r+0x1d8>
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <_svfiprintf_r+0x1f8>)
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d125      	bne.n	8003fe8 <_svfiprintf_r+0x1b0>
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	6963      	ldr	r3, [r4, #20]
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	6163      	str	r3, [r4, #20]
 8003fb0:	e765      	b.n	8003e7e <_svfiprintf_r+0x46>
 8003fb2:	4343      	muls	r3, r0
 8003fb4:	0035      	movs	r5, r6
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	189b      	adds	r3, r3, r2
 8003fba:	e7a6      	b.n	8003f0a <_svfiprintf_r+0xd2>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	425b      	negs	r3, r3
 8003fc0:	e7d0      	b.n	8003f64 <_svfiprintf_r+0x12c>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	200a      	movs	r0, #10
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	3501      	adds	r5, #1
 8003fca:	6063      	str	r3, [r4, #4]
 8003fcc:	7829      	ldrb	r1, [r5, #0]
 8003fce:	1c6e      	adds	r6, r5, #1
 8003fd0:	3930      	subs	r1, #48	; 0x30
 8003fd2:	2909      	cmp	r1, #9
 8003fd4:	d903      	bls.n	8003fde <_svfiprintf_r+0x1a6>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0c5      	beq.n	8003f66 <_svfiprintf_r+0x12e>
 8003fda:	9209      	str	r2, [sp, #36]	; 0x24
 8003fdc:	e7c3      	b.n	8003f66 <_svfiprintf_r+0x12e>
 8003fde:	4342      	muls	r2, r0
 8003fe0:	0035      	movs	r5, r6
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	1852      	adds	r2, r2, r1
 8003fe6:	e7f1      	b.n	8003fcc <_svfiprintf_r+0x194>
 8003fe8:	ab07      	add	r3, sp, #28
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	003a      	movs	r2, r7
 8003fee:	0021      	movs	r1, r4
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <_svfiprintf_r+0x1fc>)
 8003ff2:	9803      	ldr	r0, [sp, #12]
 8003ff4:	e000      	b.n	8003ff8 <_svfiprintf_r+0x1c0>
 8003ff6:	bf00      	nop
 8003ff8:	9004      	str	r0, [sp, #16]
 8003ffa:	9b04      	ldr	r3, [sp, #16]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d1d3      	bne.n	8003fa8 <_svfiprintf_r+0x170>
 8004000:	89bb      	ldrh	r3, [r7, #12]
 8004002:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004004:	065b      	lsls	r3, r3, #25
 8004006:	d400      	bmi.n	800400a <_svfiprintf_r+0x1d2>
 8004008:	e72d      	b.n	8003e66 <_svfiprintf_r+0x2e>
 800400a:	2001      	movs	r0, #1
 800400c:	4240      	negs	r0, r0
 800400e:	e72a      	b.n	8003e66 <_svfiprintf_r+0x2e>
 8004010:	ab07      	add	r3, sp, #28
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	003a      	movs	r2, r7
 8004016:	0021      	movs	r1, r4
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <_svfiprintf_r+0x1fc>)
 800401a:	9803      	ldr	r0, [sp, #12]
 800401c:	f000 f87c 	bl	8004118 <_printf_i>
 8004020:	e7ea      	b.n	8003ff8 <_svfiprintf_r+0x1c0>
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	0800474c 	.word	0x0800474c
 8004028:	08004752 	.word	0x08004752
 800402c:	08004756 	.word	0x08004756
 8004030:	00000000 	.word	0x00000000
 8004034:	08003d75 	.word	0x08003d75

08004038 <_printf_common>:
 8004038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800403a:	0015      	movs	r5, r2
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	688a      	ldr	r2, [r1, #8]
 8004040:	690b      	ldr	r3, [r1, #16]
 8004042:	000c      	movs	r4, r1
 8004044:	9000      	str	r0, [sp, #0]
 8004046:	4293      	cmp	r3, r2
 8004048:	da00      	bge.n	800404c <_printf_common+0x14>
 800404a:	0013      	movs	r3, r2
 800404c:	0022      	movs	r2, r4
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	3243      	adds	r2, #67	; 0x43
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	2a00      	cmp	r2, #0
 8004056:	d001      	beq.n	800405c <_printf_common+0x24>
 8004058:	3301      	adds	r3, #1
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	d502      	bpl.n	8004068 <_printf_common+0x30>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	3302      	adds	r3, #2
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	2306      	movs	r3, #6
 800406c:	0017      	movs	r7, r2
 800406e:	401f      	ands	r7, r3
 8004070:	421a      	tst	r2, r3
 8004072:	d027      	beq.n	80040c4 <_printf_common+0x8c>
 8004074:	0023      	movs	r3, r4
 8004076:	3343      	adds	r3, #67	; 0x43
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	4193      	sbcs	r3, r2
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	0692      	lsls	r2, r2, #26
 8004082:	d430      	bmi.n	80040e6 <_printf_common+0xae>
 8004084:	0022      	movs	r2, r4
 8004086:	9901      	ldr	r1, [sp, #4]
 8004088:	9800      	ldr	r0, [sp, #0]
 800408a:	9e08      	ldr	r6, [sp, #32]
 800408c:	3243      	adds	r2, #67	; 0x43
 800408e:	47b0      	blx	r6
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d025      	beq.n	80040e0 <_printf_common+0xa8>
 8004094:	2306      	movs	r3, #6
 8004096:	6820      	ldr	r0, [r4, #0]
 8004098:	682a      	ldr	r2, [r5, #0]
 800409a:	68e1      	ldr	r1, [r4, #12]
 800409c:	2500      	movs	r5, #0
 800409e:	4003      	ands	r3, r0
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d103      	bne.n	80040ac <_printf_common+0x74>
 80040a4:	1a8d      	subs	r5, r1, r2
 80040a6:	43eb      	mvns	r3, r5
 80040a8:	17db      	asrs	r3, r3, #31
 80040aa:	401d      	ands	r5, r3
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	6922      	ldr	r2, [r4, #16]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	dd01      	ble.n	80040b8 <_printf_common+0x80>
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	18ed      	adds	r5, r5, r3
 80040b8:	2700      	movs	r7, #0
 80040ba:	42bd      	cmp	r5, r7
 80040bc:	d120      	bne.n	8004100 <_printf_common+0xc8>
 80040be:	2000      	movs	r0, #0
 80040c0:	e010      	b.n	80040e4 <_printf_common+0xac>
 80040c2:	3701      	adds	r7, #1
 80040c4:	68e3      	ldr	r3, [r4, #12]
 80040c6:	682a      	ldr	r2, [r5, #0]
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	42bb      	cmp	r3, r7
 80040cc:	ddd2      	ble.n	8004074 <_printf_common+0x3c>
 80040ce:	0022      	movs	r2, r4
 80040d0:	2301      	movs	r3, #1
 80040d2:	9901      	ldr	r1, [sp, #4]
 80040d4:	9800      	ldr	r0, [sp, #0]
 80040d6:	9e08      	ldr	r6, [sp, #32]
 80040d8:	3219      	adds	r2, #25
 80040da:	47b0      	blx	r6
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d1f0      	bne.n	80040c2 <_printf_common+0x8a>
 80040e0:	2001      	movs	r0, #1
 80040e2:	4240      	negs	r0, r0
 80040e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040e6:	2030      	movs	r0, #48	; 0x30
 80040e8:	18e1      	adds	r1, r4, r3
 80040ea:	3143      	adds	r1, #67	; 0x43
 80040ec:	7008      	strb	r0, [r1, #0]
 80040ee:	0021      	movs	r1, r4
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	3145      	adds	r1, #69	; 0x45
 80040f4:	7809      	ldrb	r1, [r1, #0]
 80040f6:	18a2      	adds	r2, r4, r2
 80040f8:	3243      	adds	r2, #67	; 0x43
 80040fa:	3302      	adds	r3, #2
 80040fc:	7011      	strb	r1, [r2, #0]
 80040fe:	e7c1      	b.n	8004084 <_printf_common+0x4c>
 8004100:	0022      	movs	r2, r4
 8004102:	2301      	movs	r3, #1
 8004104:	9901      	ldr	r1, [sp, #4]
 8004106:	9800      	ldr	r0, [sp, #0]
 8004108:	9e08      	ldr	r6, [sp, #32]
 800410a:	321a      	adds	r2, #26
 800410c:	47b0      	blx	r6
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d0e6      	beq.n	80040e0 <_printf_common+0xa8>
 8004112:	3701      	adds	r7, #1
 8004114:	e7d1      	b.n	80040ba <_printf_common+0x82>
	...

08004118 <_printf_i>:
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	b08b      	sub	sp, #44	; 0x2c
 800411c:	9206      	str	r2, [sp, #24]
 800411e:	000a      	movs	r2, r1
 8004120:	3243      	adds	r2, #67	; 0x43
 8004122:	9307      	str	r3, [sp, #28]
 8004124:	9005      	str	r0, [sp, #20]
 8004126:	9204      	str	r2, [sp, #16]
 8004128:	7e0a      	ldrb	r2, [r1, #24]
 800412a:	000c      	movs	r4, r1
 800412c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800412e:	2a78      	cmp	r2, #120	; 0x78
 8004130:	d806      	bhi.n	8004140 <_printf_i+0x28>
 8004132:	2a62      	cmp	r2, #98	; 0x62
 8004134:	d808      	bhi.n	8004148 <_printf_i+0x30>
 8004136:	2a00      	cmp	r2, #0
 8004138:	d100      	bne.n	800413c <_printf_i+0x24>
 800413a:	e0c0      	b.n	80042be <_printf_i+0x1a6>
 800413c:	2a58      	cmp	r2, #88	; 0x58
 800413e:	d052      	beq.n	80041e6 <_printf_i+0xce>
 8004140:	0026      	movs	r6, r4
 8004142:	3642      	adds	r6, #66	; 0x42
 8004144:	7032      	strb	r2, [r6, #0]
 8004146:	e022      	b.n	800418e <_printf_i+0x76>
 8004148:	0010      	movs	r0, r2
 800414a:	3863      	subs	r0, #99	; 0x63
 800414c:	2815      	cmp	r0, #21
 800414e:	d8f7      	bhi.n	8004140 <_printf_i+0x28>
 8004150:	f7fb ffda 	bl	8000108 <__gnu_thumb1_case_shi>
 8004154:	001f0016 	.word	0x001f0016
 8004158:	fff6fff6 	.word	0xfff6fff6
 800415c:	fff6fff6 	.word	0xfff6fff6
 8004160:	fff6001f 	.word	0xfff6001f
 8004164:	fff6fff6 	.word	0xfff6fff6
 8004168:	00a8fff6 	.word	0x00a8fff6
 800416c:	009a0036 	.word	0x009a0036
 8004170:	fff6fff6 	.word	0xfff6fff6
 8004174:	fff600b9 	.word	0xfff600b9
 8004178:	fff60036 	.word	0xfff60036
 800417c:	009efff6 	.word	0x009efff6
 8004180:	0026      	movs	r6, r4
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	3642      	adds	r6, #66	; 0x42
 8004186:	1d11      	adds	r1, r2, #4
 8004188:	6019      	str	r1, [r3, #0]
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	7033      	strb	r3, [r6, #0]
 800418e:	2301      	movs	r3, #1
 8004190:	e0a7      	b.n	80042e2 <_printf_i+0x1ca>
 8004192:	6808      	ldr	r0, [r1, #0]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	1d0a      	adds	r2, r1, #4
 8004198:	0605      	lsls	r5, r0, #24
 800419a:	d50b      	bpl.n	80041b4 <_printf_i+0x9c>
 800419c:	680d      	ldr	r5, [r1, #0]
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	da03      	bge.n	80041ac <_printf_i+0x94>
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	9a04      	ldr	r2, [sp, #16]
 80041a8:	426d      	negs	r5, r5
 80041aa:	7013      	strb	r3, [r2, #0]
 80041ac:	4b61      	ldr	r3, [pc, #388]	; (8004334 <_printf_i+0x21c>)
 80041ae:	270a      	movs	r7, #10
 80041b0:	9303      	str	r3, [sp, #12]
 80041b2:	e032      	b.n	800421a <_printf_i+0x102>
 80041b4:	680d      	ldr	r5, [r1, #0]
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	0641      	lsls	r1, r0, #25
 80041ba:	d5f1      	bpl.n	80041a0 <_printf_i+0x88>
 80041bc:	b22d      	sxth	r5, r5
 80041be:	e7ef      	b.n	80041a0 <_printf_i+0x88>
 80041c0:	680d      	ldr	r5, [r1, #0]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	1d08      	adds	r0, r1, #4
 80041c6:	6018      	str	r0, [r3, #0]
 80041c8:	062e      	lsls	r6, r5, #24
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0xb8>
 80041cc:	680d      	ldr	r5, [r1, #0]
 80041ce:	e003      	b.n	80041d8 <_printf_i+0xc0>
 80041d0:	066d      	lsls	r5, r5, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0xb4>
 80041d4:	680d      	ldr	r5, [r1, #0]
 80041d6:	b2ad      	uxth	r5, r5
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <_printf_i+0x21c>)
 80041da:	270a      	movs	r7, #10
 80041dc:	9303      	str	r3, [sp, #12]
 80041de:	2a6f      	cmp	r2, #111	; 0x6f
 80041e0:	d117      	bne.n	8004212 <_printf_i+0xfa>
 80041e2:	2708      	movs	r7, #8
 80041e4:	e015      	b.n	8004212 <_printf_i+0xfa>
 80041e6:	3145      	adds	r1, #69	; 0x45
 80041e8:	700a      	strb	r2, [r1, #0]
 80041ea:	4a52      	ldr	r2, [pc, #328]	; (8004334 <_printf_i+0x21c>)
 80041ec:	9203      	str	r2, [sp, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	6821      	ldr	r1, [r4, #0]
 80041f2:	ca20      	ldmia	r2!, {r5}
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	0608      	lsls	r0, r1, #24
 80041f8:	d550      	bpl.n	800429c <_printf_i+0x184>
 80041fa:	07cb      	lsls	r3, r1, #31
 80041fc:	d502      	bpl.n	8004204 <_printf_i+0xec>
 80041fe:	2320      	movs	r3, #32
 8004200:	4319      	orrs	r1, r3
 8004202:	6021      	str	r1, [r4, #0]
 8004204:	2710      	movs	r7, #16
 8004206:	2d00      	cmp	r5, #0
 8004208:	d103      	bne.n	8004212 <_printf_i+0xfa>
 800420a:	2320      	movs	r3, #32
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	439a      	bics	r2, r3
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	0023      	movs	r3, r4
 8004214:	2200      	movs	r2, #0
 8004216:	3343      	adds	r3, #67	; 0x43
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	6863      	ldr	r3, [r4, #4]
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db03      	blt.n	800422a <_printf_i+0x112>
 8004222:	2204      	movs	r2, #4
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	4391      	bics	r1, r2
 8004228:	6021      	str	r1, [r4, #0]
 800422a:	2d00      	cmp	r5, #0
 800422c:	d102      	bne.n	8004234 <_printf_i+0x11c>
 800422e:	9e04      	ldr	r6, [sp, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00c      	beq.n	800424e <_printf_i+0x136>
 8004234:	9e04      	ldr	r6, [sp, #16]
 8004236:	0028      	movs	r0, r5
 8004238:	0039      	movs	r1, r7
 800423a:	f7fb fff5 	bl	8000228 <__aeabi_uidivmod>
 800423e:	9b03      	ldr	r3, [sp, #12]
 8004240:	3e01      	subs	r6, #1
 8004242:	5c5b      	ldrb	r3, [r3, r1]
 8004244:	7033      	strb	r3, [r6, #0]
 8004246:	002b      	movs	r3, r5
 8004248:	0005      	movs	r5, r0
 800424a:	429f      	cmp	r7, r3
 800424c:	d9f3      	bls.n	8004236 <_printf_i+0x11e>
 800424e:	2f08      	cmp	r7, #8
 8004250:	d109      	bne.n	8004266 <_printf_i+0x14e>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07db      	lsls	r3, r3, #31
 8004256:	d506      	bpl.n	8004266 <_printf_i+0x14e>
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	4293      	cmp	r3, r2
 800425e:	dc02      	bgt.n	8004266 <_printf_i+0x14e>
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	3e01      	subs	r6, #1
 8004264:	7033      	strb	r3, [r6, #0]
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	1b9b      	subs	r3, r3, r6
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	9b07      	ldr	r3, [sp, #28]
 800426e:	0021      	movs	r1, r4
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	9805      	ldr	r0, [sp, #20]
 8004274:	9b06      	ldr	r3, [sp, #24]
 8004276:	aa09      	add	r2, sp, #36	; 0x24
 8004278:	f7ff fede 	bl	8004038 <_printf_common>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d135      	bne.n	80042ec <_printf_i+0x1d4>
 8004280:	2001      	movs	r0, #1
 8004282:	4240      	negs	r0, r0
 8004284:	b00b      	add	sp, #44	; 0x2c
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004288:	2220      	movs	r2, #32
 800428a:	6809      	ldr	r1, [r1, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	6022      	str	r2, [r4, #0]
 8004290:	0022      	movs	r2, r4
 8004292:	2178      	movs	r1, #120	; 0x78
 8004294:	3245      	adds	r2, #69	; 0x45
 8004296:	7011      	strb	r1, [r2, #0]
 8004298:	4a27      	ldr	r2, [pc, #156]	; (8004338 <_printf_i+0x220>)
 800429a:	e7a7      	b.n	80041ec <_printf_i+0xd4>
 800429c:	0648      	lsls	r0, r1, #25
 800429e:	d5ac      	bpl.n	80041fa <_printf_i+0xe2>
 80042a0:	b2ad      	uxth	r5, r5
 80042a2:	e7aa      	b.n	80041fa <_printf_i+0xe2>
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	680d      	ldr	r5, [r1, #0]
 80042a8:	1d10      	adds	r0, r2, #4
 80042aa:	6949      	ldr	r1, [r1, #20]
 80042ac:	6018      	str	r0, [r3, #0]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	062e      	lsls	r6, r5, #24
 80042b2:	d501      	bpl.n	80042b8 <_printf_i+0x1a0>
 80042b4:	6019      	str	r1, [r3, #0]
 80042b6:	e002      	b.n	80042be <_printf_i+0x1a6>
 80042b8:	066d      	lsls	r5, r5, #25
 80042ba:	d5fb      	bpl.n	80042b4 <_printf_i+0x19c>
 80042bc:	8019      	strh	r1, [r3, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	9e04      	ldr	r6, [sp, #16]
 80042c2:	6123      	str	r3, [r4, #16]
 80042c4:	e7d2      	b.n	800426c <_printf_i+0x154>
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	1d11      	adds	r1, r2, #4
 80042ca:	6019      	str	r1, [r3, #0]
 80042cc:	6816      	ldr	r6, [r2, #0]
 80042ce:	2100      	movs	r1, #0
 80042d0:	0030      	movs	r0, r6
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	f000 f832 	bl	800433c <memchr>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d001      	beq.n	80042e0 <_printf_i+0x1c8>
 80042dc:	1b80      	subs	r0, r0, r6
 80042de:	6060      	str	r0, [r4, #4]
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9a04      	ldr	r2, [sp, #16]
 80042e8:	7013      	strb	r3, [r2, #0]
 80042ea:	e7bf      	b.n	800426c <_printf_i+0x154>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	0032      	movs	r2, r6
 80042f0:	9906      	ldr	r1, [sp, #24]
 80042f2:	9805      	ldr	r0, [sp, #20]
 80042f4:	9d07      	ldr	r5, [sp, #28]
 80042f6:	47a8      	blx	r5
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d0c1      	beq.n	8004280 <_printf_i+0x168>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	079b      	lsls	r3, r3, #30
 8004300:	d415      	bmi.n	800432e <_printf_i+0x216>
 8004302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004304:	68e0      	ldr	r0, [r4, #12]
 8004306:	4298      	cmp	r0, r3
 8004308:	dabc      	bge.n	8004284 <_printf_i+0x16c>
 800430a:	0018      	movs	r0, r3
 800430c:	e7ba      	b.n	8004284 <_printf_i+0x16c>
 800430e:	0022      	movs	r2, r4
 8004310:	2301      	movs	r3, #1
 8004312:	9906      	ldr	r1, [sp, #24]
 8004314:	9805      	ldr	r0, [sp, #20]
 8004316:	9e07      	ldr	r6, [sp, #28]
 8004318:	3219      	adds	r2, #25
 800431a:	47b0      	blx	r6
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d0af      	beq.n	8004280 <_printf_i+0x168>
 8004320:	3501      	adds	r5, #1
 8004322:	68e3      	ldr	r3, [r4, #12]
 8004324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	42ab      	cmp	r3, r5
 800432a:	dcf0      	bgt.n	800430e <_printf_i+0x1f6>
 800432c:	e7e9      	b.n	8004302 <_printf_i+0x1ea>
 800432e:	2500      	movs	r5, #0
 8004330:	e7f7      	b.n	8004322 <_printf_i+0x20a>
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	0800475d 	.word	0x0800475d
 8004338:	0800476e 	.word	0x0800476e

0800433c <memchr>:
 800433c:	b2c9      	uxtb	r1, r1
 800433e:	1882      	adds	r2, r0, r2
 8004340:	4290      	cmp	r0, r2
 8004342:	d101      	bne.n	8004348 <memchr+0xc>
 8004344:	2000      	movs	r0, #0
 8004346:	4770      	bx	lr
 8004348:	7803      	ldrb	r3, [r0, #0]
 800434a:	428b      	cmp	r3, r1
 800434c:	d0fb      	beq.n	8004346 <memchr+0xa>
 800434e:	3001      	adds	r0, #1
 8004350:	e7f6      	b.n	8004340 <memchr+0x4>

08004352 <memmove>:
 8004352:	b510      	push	{r4, lr}
 8004354:	4288      	cmp	r0, r1
 8004356:	d902      	bls.n	800435e <memmove+0xc>
 8004358:	188b      	adds	r3, r1, r2
 800435a:	4298      	cmp	r0, r3
 800435c:	d303      	bcc.n	8004366 <memmove+0x14>
 800435e:	2300      	movs	r3, #0
 8004360:	e007      	b.n	8004372 <memmove+0x20>
 8004362:	5c8b      	ldrb	r3, [r1, r2]
 8004364:	5483      	strb	r3, [r0, r2]
 8004366:	3a01      	subs	r2, #1
 8004368:	d2fb      	bcs.n	8004362 <memmove+0x10>
 800436a:	bd10      	pop	{r4, pc}
 800436c:	5ccc      	ldrb	r4, [r1, r3]
 800436e:	54c4      	strb	r4, [r0, r3]
 8004370:	3301      	adds	r3, #1
 8004372:	429a      	cmp	r2, r3
 8004374:	d1fa      	bne.n	800436c <memmove+0x1a>
 8004376:	e7f8      	b.n	800436a <memmove+0x18>

08004378 <_free_r>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	0005      	movs	r5, r0
 800437c:	2900      	cmp	r1, #0
 800437e:	d010      	beq.n	80043a2 <_free_r+0x2a>
 8004380:	1f0c      	subs	r4, r1, #4
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da00      	bge.n	800438a <_free_r+0x12>
 8004388:	18e4      	adds	r4, r4, r3
 800438a:	0028      	movs	r0, r5
 800438c:	f000 f8d4 	bl	8004538 <__malloc_lock>
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <_free_r+0x90>)
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <_free_r+0x2c>
 8004398:	6063      	str	r3, [r4, #4]
 800439a:	6014      	str	r4, [r2, #0]
 800439c:	0028      	movs	r0, r5
 800439e:	f000 f8d3 	bl	8004548 <__malloc_unlock>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d908      	bls.n	80043ba <_free_r+0x42>
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	1860      	adds	r0, r4, r1
 80043ac:	4283      	cmp	r3, r0
 80043ae:	d1f3      	bne.n	8004398 <_free_r+0x20>
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	1841      	adds	r1, r0, r1
 80043b6:	6021      	str	r1, [r4, #0]
 80043b8:	e7ee      	b.n	8004398 <_free_r+0x20>
 80043ba:	001a      	movs	r2, r3
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <_free_r+0x4e>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d9f9      	bls.n	80043ba <_free_r+0x42>
 80043c6:	6811      	ldr	r1, [r2, #0]
 80043c8:	1850      	adds	r0, r2, r1
 80043ca:	42a0      	cmp	r0, r4
 80043cc:	d10b      	bne.n	80043e6 <_free_r+0x6e>
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	1809      	adds	r1, r1, r0
 80043d2:	1850      	adds	r0, r2, r1
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	4283      	cmp	r3, r0
 80043d8:	d1e0      	bne.n	800439c <_free_r+0x24>
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	1841      	adds	r1, r0, r1
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	6053      	str	r3, [r2, #4]
 80043e4:	e7da      	b.n	800439c <_free_r+0x24>
 80043e6:	42a0      	cmp	r0, r4
 80043e8:	d902      	bls.n	80043f0 <_free_r+0x78>
 80043ea:	230c      	movs	r3, #12
 80043ec:	602b      	str	r3, [r5, #0]
 80043ee:	e7d5      	b.n	800439c <_free_r+0x24>
 80043f0:	6821      	ldr	r1, [r4, #0]
 80043f2:	1860      	adds	r0, r4, r1
 80043f4:	4283      	cmp	r3, r0
 80043f6:	d103      	bne.n	8004400 <_free_r+0x88>
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	1841      	adds	r1, r0, r1
 80043fe:	6021      	str	r1, [r4, #0]
 8004400:	6063      	str	r3, [r4, #4]
 8004402:	6054      	str	r4, [r2, #4]
 8004404:	e7ca      	b.n	800439c <_free_r+0x24>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	20000090 	.word	0x20000090

0800440c <_malloc_r>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	2303      	movs	r3, #3
 8004410:	1ccd      	adds	r5, r1, #3
 8004412:	439d      	bics	r5, r3
 8004414:	3508      	adds	r5, #8
 8004416:	0006      	movs	r6, r0
 8004418:	2d0c      	cmp	r5, #12
 800441a:	d21f      	bcs.n	800445c <_malloc_r+0x50>
 800441c:	250c      	movs	r5, #12
 800441e:	42a9      	cmp	r1, r5
 8004420:	d81e      	bhi.n	8004460 <_malloc_r+0x54>
 8004422:	0030      	movs	r0, r6
 8004424:	f000 f888 	bl	8004538 <__malloc_lock>
 8004428:	4925      	ldr	r1, [pc, #148]	; (80044c0 <_malloc_r+0xb4>)
 800442a:	680a      	ldr	r2, [r1, #0]
 800442c:	0014      	movs	r4, r2
 800442e:	2c00      	cmp	r4, #0
 8004430:	d11a      	bne.n	8004468 <_malloc_r+0x5c>
 8004432:	4f24      	ldr	r7, [pc, #144]	; (80044c4 <_malloc_r+0xb8>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <_malloc_r+0x38>
 800443a:	0021      	movs	r1, r4
 800443c:	0030      	movs	r0, r6
 800443e:	f000 f869 	bl	8004514 <_sbrk_r>
 8004442:	6038      	str	r0, [r7, #0]
 8004444:	0029      	movs	r1, r5
 8004446:	0030      	movs	r0, r6
 8004448:	f000 f864 	bl	8004514 <_sbrk_r>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d12b      	bne.n	80044a8 <_malloc_r+0x9c>
 8004450:	230c      	movs	r3, #12
 8004452:	0030      	movs	r0, r6
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	f000 f877 	bl	8004548 <__malloc_unlock>
 800445a:	e003      	b.n	8004464 <_malloc_r+0x58>
 800445c:	2d00      	cmp	r5, #0
 800445e:	dade      	bge.n	800441e <_malloc_r+0x12>
 8004460:	230c      	movs	r3, #12
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	2000      	movs	r0, #0
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	1b5b      	subs	r3, r3, r5
 800446c:	d419      	bmi.n	80044a2 <_malloc_r+0x96>
 800446e:	2b0b      	cmp	r3, #11
 8004470:	d903      	bls.n	800447a <_malloc_r+0x6e>
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	18e4      	adds	r4, r4, r3
 8004476:	6025      	str	r5, [r4, #0]
 8004478:	e003      	b.n	8004482 <_malloc_r+0x76>
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	42a2      	cmp	r2, r4
 800447e:	d10e      	bne.n	800449e <_malloc_r+0x92>
 8004480:	600b      	str	r3, [r1, #0]
 8004482:	0030      	movs	r0, r6
 8004484:	f000 f860 	bl	8004548 <__malloc_unlock>
 8004488:	0020      	movs	r0, r4
 800448a:	2207      	movs	r2, #7
 800448c:	300b      	adds	r0, #11
 800448e:	1d23      	adds	r3, r4, #4
 8004490:	4390      	bics	r0, r2
 8004492:	1ac2      	subs	r2, r0, r3
 8004494:	4298      	cmp	r0, r3
 8004496:	d0e6      	beq.n	8004466 <_malloc_r+0x5a>
 8004498:	1a1b      	subs	r3, r3, r0
 800449a:	50a3      	str	r3, [r4, r2]
 800449c:	e7e3      	b.n	8004466 <_malloc_r+0x5a>
 800449e:	6053      	str	r3, [r2, #4]
 80044a0:	e7ef      	b.n	8004482 <_malloc_r+0x76>
 80044a2:	0022      	movs	r2, r4
 80044a4:	6864      	ldr	r4, [r4, #4]
 80044a6:	e7c2      	b.n	800442e <_malloc_r+0x22>
 80044a8:	2303      	movs	r3, #3
 80044aa:	1cc4      	adds	r4, r0, #3
 80044ac:	439c      	bics	r4, r3
 80044ae:	42a0      	cmp	r0, r4
 80044b0:	d0e1      	beq.n	8004476 <_malloc_r+0x6a>
 80044b2:	1a21      	subs	r1, r4, r0
 80044b4:	0030      	movs	r0, r6
 80044b6:	f000 f82d 	bl	8004514 <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d1db      	bne.n	8004476 <_malloc_r+0x6a>
 80044be:	e7c7      	b.n	8004450 <_malloc_r+0x44>
 80044c0:	20000090 	.word	0x20000090
 80044c4:	20000094 	.word	0x20000094

080044c8 <_realloc_r>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	0007      	movs	r7, r0
 80044cc:	000d      	movs	r5, r1
 80044ce:	0016      	movs	r6, r2
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d105      	bne.n	80044e0 <_realloc_r+0x18>
 80044d4:	0011      	movs	r1, r2
 80044d6:	f7ff ff99 	bl	800440c <_malloc_r>
 80044da:	0004      	movs	r4, r0
 80044dc:	0020      	movs	r0, r4
 80044de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	d103      	bne.n	80044ec <_realloc_r+0x24>
 80044e4:	f7ff ff48 	bl	8004378 <_free_r>
 80044e8:	0034      	movs	r4, r6
 80044ea:	e7f7      	b.n	80044dc <_realloc_r+0x14>
 80044ec:	f000 f834 	bl	8004558 <_malloc_usable_size_r>
 80044f0:	002c      	movs	r4, r5
 80044f2:	42b0      	cmp	r0, r6
 80044f4:	d2f2      	bcs.n	80044dc <_realloc_r+0x14>
 80044f6:	0031      	movs	r1, r6
 80044f8:	0038      	movs	r0, r7
 80044fa:	f7ff ff87 	bl	800440c <_malloc_r>
 80044fe:	1e04      	subs	r4, r0, #0
 8004500:	d0ec      	beq.n	80044dc <_realloc_r+0x14>
 8004502:	0029      	movs	r1, r5
 8004504:	0032      	movs	r2, r6
 8004506:	f7ff fc03 	bl	8003d10 <memcpy>
 800450a:	0029      	movs	r1, r5
 800450c:	0038      	movs	r0, r7
 800450e:	f7ff ff33 	bl	8004378 <_free_r>
 8004512:	e7e3      	b.n	80044dc <_realloc_r+0x14>

08004514 <_sbrk_r>:
 8004514:	2300      	movs	r3, #0
 8004516:	b570      	push	{r4, r5, r6, lr}
 8004518:	4d06      	ldr	r5, [pc, #24]	; (8004534 <_sbrk_r+0x20>)
 800451a:	0004      	movs	r4, r0
 800451c:	0008      	movs	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fd f8d4 	bl	80016cc <_sbrk>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d103      	bne.n	8004530 <_sbrk_r+0x1c>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d000      	beq.n	8004530 <_sbrk_r+0x1c>
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	20000214 	.word	0x20000214

08004538 <__malloc_lock>:
 8004538:	b510      	push	{r4, lr}
 800453a:	4802      	ldr	r0, [pc, #8]	; (8004544 <__malloc_lock+0xc>)
 800453c:	f000 f814 	bl	8004568 <__retarget_lock_acquire_recursive>
 8004540:	bd10      	pop	{r4, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	2000021c 	.word	0x2000021c

08004548 <__malloc_unlock>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4802      	ldr	r0, [pc, #8]	; (8004554 <__malloc_unlock+0xc>)
 800454c:	f000 f80d 	bl	800456a <__retarget_lock_release_recursive>
 8004550:	bd10      	pop	{r4, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	2000021c 	.word	0x2000021c

08004558 <_malloc_usable_size_r>:
 8004558:	1f0b      	subs	r3, r1, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1f18      	subs	r0, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	da01      	bge.n	8004566 <_malloc_usable_size_r+0xe>
 8004562:	580b      	ldr	r3, [r1, r0]
 8004564:	18c0      	adds	r0, r0, r3
 8004566:	4770      	bx	lr

08004568 <__retarget_lock_acquire_recursive>:
 8004568:	4770      	bx	lr

0800456a <__retarget_lock_release_recursive>:
 800456a:	4770      	bx	lr

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
